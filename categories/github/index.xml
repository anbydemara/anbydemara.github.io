<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github on Anburger&#39;s Homepage</title>
    <link>https://anburger.site/categories/github/</link>
    <description>Recent content from Anburger&#39;s Homepage</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    
    <managingEditor>yang_zc@aliyun.com (Anburger)</managingEditor>
    <webMaster>yang_zc@aliyun.com (Anburger)</webMaster>
    
    <copyright>本博客所有文章除特别声明外，均采用 BY-NC-SA 许可协议。转载请注明出处！</copyright>
    
    <lastBuildDate>Fri, 08 Aug 2025 23:00:00 +0800</lastBuildDate>
    
    
    <atom:link href="https://anburger.site/categories/github/index.xml" rel="self" type="application/rss&#43;xml" />
    

    
    

    <item>
      <title>Github Actions笔记</title>
      <link>https://anburger.site/post/note-of-github-actions/</link>
      <pubDate>Fri, 08 Aug 2025 23:00:00 &#43;0800</pubDate>
      <author>yang_zc@aliyun.com (Anburger)</author>
      <guid>https://anburger.site/post/note-of-github-actions/</guid>
      <description>
        <![CDATA[<h1>Github Actions笔记</h1><p>作者：Anburger（yang_zc@aliyun.com）</p>
        
          <h2 id="1-简介">
<a class="header-anchor" href="#1-%e7%ae%80%e4%bb%8b"></a>
1 简介
</h2><h3 id="11-actions组成">
<a class="header-anchor" href="#11-actions%e7%bb%84%e6%88%90"></a>
1.1 Actions组成
</h3><blockquote>
<p>An <strong>action</strong> is a pre-defined, reusable set of jobs or code that performs specific tasks within a <strong>workflow</strong>.</p></blockquote>
<p>&#x31;&#xfe0f;&#x20e3; <strong>Workflows</strong></p>
<blockquote>
<p>A <strong>workflow</strong> is a configurable automated process that will run one or more jobs.</p></blockquote>
<p>&#x32;&#xfe0f;&#x20e3; <strong>Events</strong></p>
<blockquote>
<p>An <strong>event</strong> is a specific activity in a repository that triggers a <strong>workflow</strong> run.</p></blockquote>
<p>&#x33;&#xfe0f;&#x20e3; <strong>Jobs</strong></p>
<blockquote>
<p>A <strong>job</strong> is a set of <strong>steps</strong> in a workflow that is executed on the same <strong>runner</strong>.</p></blockquote>
<p>&#x34;&#xfe0f;&#x20e3; <strong>Runners</strong></p>
<blockquote>
<p>A <strong>runner</strong> is a server that runs your workflows when they&rsquo;re triggered. Each runner can run a single <strong>job</strong> at a time.</p></blockquote>
<h3 id="12-starter-workflows">
<a class="header-anchor" href="#12-starter-workflows"></a>
1.2 Starter Workflows
</h3><div class="post-link-card-wrap">
  <div class="post-link-card">
    <a href="https://github.com/actions/starter-workflows" title="Starter Workflows" rel="noopener external nofollow noreferrer" target="_blank"></a><div class="post-link-card-cover-wrap auto">
        <div class="icon-globe"></div>
      </div><div class="post-link-card-item-wrap">
      <div class="post-link-card-title">Starter Workflows</div>
      <div class="post-link-card-excerpt">
        <span class="icon-link"></span>https://github.com/actions/starter-workflows
      </div>
    </div>
  </div>
</div>

<h2 id="2-quick-start">
<a class="header-anchor" href="#2-quick-start"></a>
2 Quick Start
</h2><p>&#x31;&#xfe0f;&#x20e3; <code>new workflow</code></p>
<p><code>进入仓库--&gt;Actions--&gt;new workflow</code>，可以选择Github推荐的workflow，或者<code>set up  a workflow yourself</code></p>
<p><img src="https://qiniu.anburger.site/post/image-20250809130637620.png" alt="image-20250809130637620"></p>
<p>创建<code>action-demo.yml</code>（也可以自己新建<code>.github/workflows</code>文件夹，在该文件夹下新建<code>.yml</code>文件配置新的workflow）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">GitHub Actions Demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">run-name</span><span class="p">:</span><span class="w"> </span><span class="l">${{ github.actor }} is testing out GitHub Actions 🚀</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">push]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">Explore-GitHub-Actions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">echo &#34;🎉 The job was automatically triggered by a ${{ github.event_name }} event.&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">echo &#34;🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">echo &#34;🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Check out repository code</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">echo &#34;💡 The ${{ github.repository }} repository has been cloned to the runner.&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">echo &#34;🖥️ The workflow is now ready to test your code on the runner.&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">List files in the repository</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          ls ${{ github.workspace }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">echo &#34;🍏 This job&#39;s status is ${{ job.status }}.&#34;</span><span class="w">
</span></span></span></code></pre></div><p><img src="https://qiniu.anburger.site/post/image-20250809131408013.png" alt="image-20250809131408013"></p>
<p>该workflow被设置为当仓库<code>push</code>事件时触发，主要进行一些打印和将该仓库代码clone到我们的<code>Runner</code>中。点击<code>commit changes</code>后选择一种提交方式，则会push我们本次修改到仓库，同时也触发了新建的workflow。进入<code>Action</code>可以查看<code>workflow</code>执行结果：</p>
<p><img src="https://qiniu.anburger.site/post/image-20250809132725794.png" alt="image-20250809132725794"></p>
<p>&#x1f389;Congratulations! Actions的基本使用已经完成。在此基础上，可以通过更详细的配置自由控制你想执行Jobs。</p>
<h2 id="3-cicd">
<a class="header-anchor" href="#3-cicd"></a>
3 CI/CD
</h2><h3 id="31-continuous-integration-ci">
<a class="header-anchor" href="#31-continuous-integration-ci"></a>
3.1 Continuous Integration (CI)
</h3><blockquote>
<p>Continuous integration (CI) is a software practice that requires frequently committing code to a shared repository.</p></blockquote>
<blockquote>
<p>When you commit code to your repository, you can continuously build and test the code to make sure that the commit doesn&rsquo;t introduce errors.</p></blockquote>
<div class="post-link-card-wrap">
  <div class="post-link-card">
    <a href="https://docs.github.com/en/actions/tutorials/build-and-test-code" title="build-and-test-code" rel="noopener external nofollow noreferrer" target="_blank"></a><div class="post-link-card-cover-wrap auto">
        <div class="icon-globe"></div>
      </div><div class="post-link-card-item-wrap">
      <div class="post-link-card-title">build-and-test-code</div>
      <div class="post-link-card-excerpt">
        <span class="icon-link"></span>https://docs.github.com/en/actions/tutorials/build-and-test-code
      </div>
    </div>
  </div>
</div>

<p>&#x1f6a9;案例：<code>Java with Maven</code></p>
<p><code>进入仓库--&gt;Actions--&gt;new workflow</code>，搜索并选择<code>Java with Maven</code>。适当调整配置，例如修改Java版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Java CI with Maven</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">&#34;main&#34;</span><span class="w"> </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pull_request</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">&#34;main&#34;</span><span class="w"> </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Set up JDK 11</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/setup-java@v4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">java-version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;11&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">distribution</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;temurin&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">cache</span><span class="p">:</span><span class="w"> </span><span class="l">maven</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build with Maven</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">mvn -B package --file pom.xml</span><span class="w">
</span></span></span></code></pre></div><p>提交该workflow后，会因为push触发一次，若此时仓库中没有代码（pom.xml），将会运行失败。</p>
<p>两种触发事件：</p>
<p>&#x31;&#xfe0f;&#x20e3; push</p>
<p>push代码到主分支（我们提交一个可以正常运行的maven项目测试），等待执行完成后查看结果。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git pull origin main    <span class="c1"># 拉取远程最新代码</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git add .	<span class="c1"># 添加所有修改</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;first commit&#34;</span>	<span class="c1"># 提交到本地仓库</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git push -u origin main		<span class="c1"># 推送到远程main分支</span>
</span></span></code></pre></div><div style="display: flex;">
	<img src="https://qiniu.anburger.site/post/image-20250809174945421.png" alt="image-20250809174945421"/>
    <img src="https://qiniu.anburger.site/post/image-20250809175308575.png" alt="image-20250809175308575"/>
</div>
<p>&#x32;&#xfe0f;&#x20e3; pull_request</p>
<p>我们设置一个Error，然后提交代码到新分支。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 如果是最新则不执行也行</span>
</span></span><span class="line"><span class="cl">git checkout main       <span class="c1"># 切换到主分支</span>
</span></span><span class="line"><span class="cl">git pull origin main    <span class="c1"># 拉取远程最新代码</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 创建并切换到新分支</span>
</span></span><span class="line"><span class="cl">git checkout -b your-branch-name 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git add .	<span class="c1"># 添加所有修改</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;testing ci error&#34;</span>	<span class="c1"># 提交到本地仓库</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git push -u origin your-branch-name 	<span class="c1"># 推送到远程</span>
</span></span></code></pre></div><p>进入github仓库，可以看到pull request提示：点击<code>Compare &amp; pull request</code>，并提交。</p>
<p><img src="https://qiniu.anburger.site/post/image-20250809181117509.png" alt="image-20250809181117509"></p>
<p>可以看到，我们的CI Action检测出了错误，我们就需要谨慎merge啦：</p>
<p><img src="https://qiniu.anburger.site/post/image-20250809181332473.png" alt="image-20250809181332473"></p>
<p><img src="https://qiniu.anburger.site/post/image-20250809181515738.png" alt="image-20250809181515738"></p>

        
        <hr><p>本文2025-08-08首发于<a href='https://anburger.site/'>Anburger's Homepage</a>，最后修改于2025-08-08</p>]]>
      </description>
      
        <category>笔记</category><category>Github</category>
      
    </item>
    
    

    <item>
      <title>Webhook实现Github自动推送到Linux自动部署</title>
      <link>https://anburger.site/post/webhook-github/</link>
      <pubDate>Wed, 23 Jul 2025 10:00:00 &#43;0800</pubDate>
      <author>yang_zc@aliyun.com (Anburger)</author>
      <guid>https://anburger.site/post/webhook-github/</guid>
      <description>
        <![CDATA[<h1>Webhook实现Github自动推送到Linux自动部署</h1><p>作者：Anburger（yang_zc@aliyun.com）</p>
        
          <p>&#x2600;&#xfe0f; 场景：<code>Github</code>中代码更新后自动推送到服务器并部署</p>
<p>&#x1f527; 工具：<code>Webhook</code>​</p>
<h2 id="1-github配置webhook">
<a class="header-anchor" href="#1-github%e9%85%8d%e7%bd%aewebhook"></a>
1. Github配置Webhook
</h2><p>&#x1f4cd;例如我在<a href="https://github.com/anbydemara/anbydemara.github.io">anbydemara.github.io</a>该仓库中存储了我的静态博客网站，我希望当我<code>push</code>到该仓库时，<code>Github</code>自动通知我的服务器并执行自定义指令。</p>
<p>&#x31;&#xfe0f;&#x20e3; ​进入<code>Github</code>仓库，<code>Settings-&gt;Webhooks-&gt;Add webhook</code></p>
<p><img src="https://qiniu.anburger.site/post/image-20250723111230291.png" alt="image-20250723111230291"></p>
<p>&#x32;&#xfe0f;&#x20e3; 填写配置信息</p>
<ul>
<li>
<p><code>PayLoad URL</code>：<code>http://your_servier_ip:port/path/{id}</code>，其中<code>port:9000，path:hooks</code>都是默认值，我们保存不变。修改修改为自己的ip地址，并且为该<code>Payload</code>自定义一个<code>id</code></p>
</li>
<li>
<p><code>Content type</code>：选择<code>application/json</code>格式</p>
</li>
<li>
<p><code>Secret</code>：设置自己的<code>Secret token</code>用于验证，可以使用一个随机字符串</p>
</li>
<li>
<p><code>webhook</code>触发条件：<code>Just push event</code>表示push代码到仓库时触发，可以自定义其他事件</p>
<p>其他保持默认，最后<code>Update webhook</code>：</p>
</li>
</ul>
<p><img src="https://qiniu.anburger.site/post/image-20250723111759923.png" alt="image-20250723111759923"></p>
<h2 id="2-服务器创建hook">
<a class="header-anchor" href="#2-%e6%9c%8d%e5%8a%a1%e5%99%a8%e5%88%9b%e5%bb%bahook"></a>
2. 服务器创建hook
</h2><p>&#x1f4cd;我们使用<a href="https://github.com/adnanh/webhook">webhook</a>工具：</p>
<blockquote>
<p><a href="https://github.com/adnanh/webhook">webhook</a> is a lightweight configurable tool written in Go, that allows you to easily create HTTP endpoints (hooks) on your server, which you can use to execute configured commands. You can also pass data from the HTTP request (such as headers, payload or query variables) to your commands. <a href="https://github.com/adnanh/webhook">webhook</a> also allows you to specify rules which have to be satisfied in order for the hook to be triggered.</p></blockquote>
<h3 id="21-安装">
<a class="header-anchor" href="#21-%e5%ae%89%e8%a3%85"></a>
2.1 安装
</h3><p>See：<a href="https://github.com/adnanh/webhook/blob/master/README.md">webhook/README.md at master · adnanh/webhook</a></p>
<p>我的安装目录为<code>/usr/local/src/webhook/</code>，安装成功后，该文件夹下有一个名为<code>webhook</code>的文件，我们为其添加执行权限<code>chmod +x webhook</code></p>
<h3 id="22-配置hook">
<a class="header-anchor" href="#22-%e9%85%8d%e7%bd%aehook"></a>
2.2 配置hook
</h3><p>&#x31;&#xfe0f;&#x20e3; 新建<code>hook.json</code>（自定义路径，这里存放在webhook安装目录下新建的<code>my-scripts</code>文件夹中）</p>
<p>该文件配置了一些规则，主要用于请求校验。在<code>Github</code>中我们配置了仓库<code>push</code>事件时，将使用<code>webhook</code>功能发送一个<code>POST</code>请求。在服务器上安装了<code>webhook</code>后，就可以监听对应的端口处理该请求。为了确保接受到的请求是<code>Github</code>触发指定事件时发送的，需进行校验：</p>
<ul>
<li><code>id</code>：需要与<code>Github</code>中配置<code>PayLoad URL</code>时指定的<code>id</code>一致</li>
<li><code>execute-command</code>：自定义执行脚本文件路径，请求校验成功后要执行的脚本，这里我在<code>/usr/local/src/webhook/my-scripts</code>新建了一个<code>rebuildblog.sh</code>脚本</li>
<li><code>secret</code>：需与<code>Github</code>中配置的一致</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;anburger-blog-rebuild&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;execute-command&#34;</span><span class="p">:</span> <span class="s2">&#34;/usr/local/src/webhook/my-scripts/rebuildblog.sh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;trigger-rule&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;and&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;match&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;payload-hmac-sha1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;secret&#34;</span><span class="p">:</span> <span class="s2">&#34;yoursecret&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;parameter&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;header&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;X-Hub-Signature&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;match&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;value&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;refs/heads/main&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;parameter&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;payload&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;ref&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>&#x32;&#xfe0f;&#x20e3; 新建执行脚本<code>rebuildblog.sh</code>（自定义路径，这里存放在webhook安装目录下新建的<code>my-scripts</code>文件夹中）</p>
<p>通过上一步<code>hook.json</code>校验后，将自动执行该脚本，我们可以在这里执行部署任务</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nb">cd</span> /root/docker/nginx/html/
</span></span><span class="line"><span class="cl"><span class="c1"># 执行你的指令，简单示例</span>
</span></span><span class="line"><span class="cl">git pull origin main  <span class="c1"># 从github拉取新代码</span>
</span></span><span class="line"><span class="cl">docker restart nginx  <span class="c1"># 重启nginx    </span>
</span></span></code></pre></div><p>给脚本增加执行权限<code>chmod +x rebuildblog.sh</code></p>
<p>&#x33;&#xfe0f;&#x20e3; 启动<code>webhook</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 进入webhook安装路径</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /usr/local/src/webhook
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 启动webhook，只当hook.json，默认监听9000端口</span>
</span></span><span class="line"><span class="cl">./webhook -hooks ./my-scripts/hooks.json -verbose
</span></span></code></pre></div><p><img src="https://qiniu.anburger.site/post/image-20250726212413583.png" alt="image-20250726212413583"></p>
<p>测试：<code>push</code>代码到仓库后，成功执行脚本</p>
<p><img src="https://qiniu.anburger.site/post/image-20250726212624165.png" alt="image-20250726212624165"></p>
<p>到这里，我们便实现了<code>push</code>代码到<code>Github</code>，自动通知服务器并执行相应指令的基本过程。接下来设置webhook为自启动服务。</p>
<h2 id="3-设置开机自启动">
<a class="header-anchor" href="#3-%e8%ae%be%e7%bd%ae%e5%bc%80%e6%9c%ba%e8%87%aa%e5%90%af%e5%8a%a8"></a>
3. 设置开机自启动
</h2><p>&#x31;&#xfe0f;&#x20e3; 创建服务：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">vi /etc/systemd/system/webhook.service
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>Unit<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Description</span><span class="o">=</span>Webhook Service
</span></span><span class="line"><span class="cl"><span class="nv">After</span><span class="o">=</span>network.target
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Service<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Type</span><span class="o">=</span>simple
</span></span><span class="line"><span class="cl"><span class="nv">User</span><span class="o">=</span>root
</span></span><span class="line"><span class="cl"><span class="nv">WorkingDirectory</span><span class="o">=</span>/usr/local/src/webhook
</span></span><span class="line"><span class="cl"><span class="nv">ExecStart</span><span class="o">=</span>/usr/local/src/webhook/webhook -hooks ./my-scripts/hooks.json -verbose
</span></span><span class="line"><span class="cl"><span class="nv">Restart</span><span class="o">=</span>always
</span></span><span class="line"><span class="cl"><span class="nv">RestartSec</span><span class="o">=</span>5s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Install<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</span></span></code></pre></div><p>&#x32;&#xfe0f;&#x20e3; 启动服务：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 重新加载systemd</span>
</span></span><span class="line"><span class="cl">systemctl daemon-reload
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 启动服务</span>
</span></span><span class="line"><span class="cl">systemctl start webhook
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 设置开机自启动</span>
</span></span><span class="line"><span class="cl">systemctl <span class="nb">enable</span> webhook
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看服务状态</span>
</span></span><span class="line"><span class="cl">systemctl status webhook
</span></span></code></pre></div><p>&#x1f389; Congratulations! 我们已经实现基本的自动化部署了，你可以尽情的在此基础上进行扩展，例如​完善请求校验处理、按需求撰写你的执行脚本等。</p>

        
        <hr><p>本文2025-07-23首发于<a href='https://anburger.site/'>Anburger's Homepage</a>，最后修改于2025-07-23</p>]]>
      </description>
      
        <category>自动化工具</category><category>Github</category>
      
    </item>
    
  </channel>
</rss>
