[
  {
    "objectID": "67162b4878ac71fe5dfad5d3b584dffb40612716",
    "permalink": "/post/webhook-github/",
    "title": "Webhook实现Github自动推送到Linux自动部署","content": "\r1. Github配置Webhook\r\u0026#x1f4cd;例如我在anbydemara.github.io该仓库中存储了我的静态博客网站，我希望当我push到该仓库时，Github自动通知我的服务器并执行自定义指令。\n\u0026#x31;\u0026#xfe0f;\u0026#x20e3; ​进入Github仓库，Settings-\u0026gt;Webhooks-\u0026gt;Add webhook\n\u0026#x32;\u0026#xfe0f;\u0026#x20e3; 填写配置信息\nPayLoad URL：http://your_servier_ip:port/path/{id}，其中port:9000，path:hooks都是默认值，我们保存不变。修改修改为自己的ip地址，并且为该Payload自定义一个id\nContent type：选择application/json格式\nSecret：设置自己的Secret token用于验证，可以使用一个随机字符串\nwebhook触发条件：Just push event表示push代码到仓库时触发，可以自定义其他事件\n其他保持默认，最后Update webhook：\n2. 服务器创建hook\r\u0026#x1f4cd;我们使用webhook工具：\nwebhook is a lightweight configurable tool written in Go, that allows you to easily create HTTP endpoints (hooks) on your server, which you can use to execute configured commands. You can also pass data from the HTTP request (such as headers, payload or query variables) to your commands. webhook also allows you to specify rules which have to be satisfied in order for the hook to be triggered.\n2.1 安装\rSee：webhook/README.md at master · adnanh/webhook\n2.2 配置hook\r\u0026#x31;\u0026#xfe0f;\u0026#x20e3; hook.json\n\u0026#x32;\u0026#xfe0f;\u0026#x20e3; 执行脚本\n3. 设置开机自启动\r\u0026#x31;\u0026#xfe0f;\u0026#x20e3; 创建服务：\nvi /etc/systemd/system/webhook.service [Unit] Description=Webhook Service After=network.target [Service] Type=simple User=root WorkingDirectory=/usr/local/src/webhook ExecStart=/usr/local/src/webhook/webhook -hooks ./my-scripts/hooks.json -verbose Restart=always RestartSec=5s [Install] WantedBy=multi-user.target \u0026#x32;\u0026#xfe0f;\u0026#x20e3; 启动服务：\n# 重新加载systemd systemctl daemon-reload # 启动服务 systemctl start webhook # 设置开机自启动 systemctl enable webhook # 查看服务状态 systemctl status webhook \u0026#x1f389; Congratulations! 我们已经实现基本的自动化部署了，你可以尽情的在此基础上进行扩展，例如​完善请求校验处理、按需求撰写你的执行脚本等。\n","date": "2025-07-23 10:00:00",
    "updated": "2025-07-23 10:00:00"
  }, 
  {
    "objectID": "17ef4c511925b169183667610ab3598d176237f7",
    "permalink": "/post/picgo-typora/",
    "title": "PicGo实现Typora插入图片上传服务","content": "现在已经有非常多的快速搭建博客站的工具，例如JeckII、Hexo、Hugo等，它们都具有非常优秀的使用体验，并且可以通过GitHub、CloudFlare等工具进行免费部署。利用它们成功搭建出自己的博客站后，往往使用Markdown进行博客内容撰写。在撰写过程中，我们会发现处理图片时会面临一些窘境：\n需要将图片放到特定资源文件夹（进行上传），操作不方便 图片过多后占用空间 图片太大时加载速度慢等 我们可以采用将图片资源存放到图床的方案解决图片存储、路径问题。此外，在写作过程中通过安装PicGo工具+压缩等插件简化撰写过程，接下来跟我一起让写博客变得更加优雅吧！\n1. 安装\rPicGo: 一个用于快速上传图片并获取图片 URL 链接的工具，官方文档：PicGo有详细的使用教程。\n下载：PicGo-release，PicGo提供众多beta版本，若希望体验新功能可安装最新beta版本。推荐安装正式版本。下载对应系统安装包进行安装，这里以windows系统为例，下载2.3.1版本安装程序： 运行安装程序进行安装，安装成功后开始使用PicGo： 2. 配置图床\rPicGo 本体支持如下图床：\n七牛图床 v1.0 腾讯云 COS v4\\v5 版本 v1.1 \u0026amp;amp; v1.5.0 又拍云 v1.2.0 GitHub v1.5.0 SM.MS V2 v2.3.0-beta.0 阿里云 OSS v1.6.0 Imgur v1.6.0 本文使用七牛云对象存储。\n2.1 七牛云对象存储申请\r进入七牛云 | 一站式中立音视频云 + AI，完成账号设置（注册、登录、认证等）。 完成后进入控制台（入口在网页右上角），选择新建存储空间： 在新建存储空间面板中填写信息： 存储空间名称：自定义 存储区域：如果你拥有已备案的域名或者仅做测试使用，选择国内区域。如果你的域名无法备案，可选择海外区域（不需要备案，但访问可能需要梯子） 访问控制：公开（更方便） ​ 填写完成后点击确认。\n绑定域名\n存储空间创建后，会分配一个测试域名，可以直接使用，但是会被回收，因此不推荐实际使用。\n如果没有域名，可以注册免费域名，详见：。\n拥有一个域名后，进入新建的存储空间进行域名管理：\n因为CDN加速域名需要进行域名所有权认证，所以我这里选择自定义源站域名，点击绑定域名后，填写：\n从绑定的域名列表中，复制CNAME …","date": "2025-07-22 12:00:00",
    "updated": "2025-07-22 12:00:00"
  }, 
  {
    "objectID": "48d23cb87473a3bee8bbe59278bf79919d7348c5",
    "permalink": "/post/causehsi-readme/",
    "title": "CauseHSI项目说明","content": "\r1 简介\rCauseHSI项目为论文CauseHSI: Cross-scene Hyperspectral image classifaction via Causal Disentanglement提供代码实现。CauseHSI用于高光谱图像跨场景分类任务，其架构图如下：\nCauseHSI主要分为两个部分：生成模块Generation Module(CGM)和因果解耦模块Causal Disentanglement Module(CDM)\n2. 使用\r2.1 准备\r2.1.1 Requirements\rpip intsall -r requirements.txt 2.1.2 数据集存储结构\r#### 数据集目录结构 ├── data │ └── datasets │ ├── Houston │ ├── Pavia │ └── HyRANK └── ... 2.1.3 Pre-Augmented\r在我们的方法中，需要对源域数据进行一次DCT变换和IDCT变换，我们的方法是基于Patch的高光谱图像分类任务，如果对每一个Patch进行变换降低了模型计算速度。因此，我们推荐您直接对原始数据（一张完整的高光谱图像）进行变换\npython scg_aug.py 2.2 Train\rHouston: python train-gan.py --data_path Houston/ --source_domain Houston13 --target_domain Houston18 \\ --training_sample_ratio 0.8 --flip_augmentation --radiation_augmentation Pavia: python train-gan.py --data_path Pavia/ --source_domain PaviaU --target_domain PaviaC \\ --training_sample_ratio 0.5 HyRANK: python train-gan.py --data_path HyRANK/ --source_domain Dioni --target_domain Loukia \\ --training_sample_ratio 0.8 2.3 Visualization\r2.4 Loss\r2.4.1 Causal-inspired Disentanglement Loss\r2.1. independence loss\n2.2.1 reconstruction loss\n2.2.2 causal loss for disentanglement\n2.3. consistency loss\n2.4.2 Domain Generation Loss\rbalance loss for Generator\n2.4.3 Basic Loss\rSD classification loss\nED classification loss\n3. Acknowledgments\r我们在此衷心感谢以下作者提供的开源代码：\n我们的论文在数据处理、空间随机化和光谱随机化采用了xxx所提供的代码实现，并且该论文也是我们做该研究的启发 数据集来自于 https://github.com/YuxiangZhang-BIT/Data-CSHSI 整理的Houston、Pavia和HyRANK 特征提取模块我们采用了CVSS的部分结构 对于图像的采用DCT变换是常用手段，我们对于该部分的处理借鉴了自然图像领域的处理，主要是来自于论文xxx HSIC独立性评判准则是一个经典方法，我们采用了xxx所提供的代码实现，同时简单沿用了早期分支的思想。该论文也启发我们尝试使用解耦作为解决高光谱跨场景分类任务的解决方案，而不是继续延续现在最常用的对比学习和对比对抗学习 ","date": "2025-07-21 22:57:57",
    "updated": "2025-07-22 13:30:57"
  }]