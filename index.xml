<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Anby Demara&#39;s Homepage</title>
    <link>https://anburger.site/algolia.json</link>
    <description>Recent content from Anby Demara&#39;s Homepage</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    
    <managingEditor>yang_zc@aliyun.com (Anburger)</managingEditor>
    <webMaster>yang_zc@aliyun.com (Anburger)</webMaster>
    
    <copyright>本博客所有文章除特别声明外，均采用 BY-NC-SA 许可协议。转载请注明出处！</copyright>
    
    <lastBuildDate>Fri, 08 Aug 2025 23:00:00 +0800</lastBuildDate>
    
    
    <atom:link href="https://anburger.site/index.xml" rel="self" type="application/rss&#43;xml" />
    

    
    

    <item>
      <title>Github Actions笔记</title>
      <link>https://anburger.site/post/note-of-github-actions/</link>
      <pubDate>Fri, 08 Aug 2025 23:00:00 &#43;0800</pubDate>
      <author>yang_zc@aliyun.com (Anburger)</author>
      <guid>https://anburger.site/post/note-of-github-actions/</guid>
      <description>
        <![CDATA[<h1>Github Actions笔记</h1><p>作者：Anburger（yang_zc@aliyun.com）</p>
        
          <h2 id="1-简介">
<a class="header-anchor" href="#1-%e7%ae%80%e4%bb%8b"></a>
1 简介
</h2><h3 id="11-actions组成">
<a class="header-anchor" href="#11-actions%e7%bb%84%e6%88%90"></a>
1.1 Actions组成
</h3><blockquote>
<p>An <strong>action</strong> is a pre-defined, reusable set of jobs or code that performs specific tasks within a <strong>workflow</strong>.</p></blockquote>
<p>&#x31;&#xfe0f;&#x20e3; <strong>Workflows</strong></p>
<blockquote>
<p>A <strong>workflow</strong> is a configurable automated process that will run one or more jobs.</p></blockquote>
<p>&#x32;&#xfe0f;&#x20e3; <strong>Events</strong></p>
<blockquote>
<p>An <strong>event</strong> is a specific activity in a repository that triggers a <strong>workflow</strong> run.</p></blockquote>
<p>&#x33;&#xfe0f;&#x20e3; <strong>Jobs</strong></p>
<blockquote>
<p>A <strong>job</strong> is a set of <strong>steps</strong> in a workflow that is executed on the same <strong>runner</strong>.</p></blockquote>
<p>&#x34;&#xfe0f;&#x20e3; <strong>Runners</strong></p>
<blockquote>
<p>A <strong>runner</strong> is a server that runs your workflows when they&rsquo;re triggered. Each runner can run a single <strong>job</strong> at a time.</p></blockquote>
<h3 id="12-starter-workflows">
<a class="header-anchor" href="#12-starter-workflows"></a>
1.2 Starter Workflows
</h3><div class="post-link-card-wrap">
  <div class="post-link-card">
    <a href="https://github.com/actions/starter-workflows" title="Starter Workflows" rel="noopener external nofollow noreferrer" target="_blank"></a><div class="post-link-card-cover-wrap auto">
        <div class="icon-globe"></div>
      </div><div class="post-link-card-item-wrap">
      <div class="post-link-card-title">Starter Workflows</div>
      <div class="post-link-card-excerpt">
        <span class="icon-link"></span>https://github.com/actions/starter-workflows
      </div>
    </div>
  </div>
</div>

<h2 id="2-quick-start">
<a class="header-anchor" href="#2-quick-start"></a>
2 Quick Start
</h2><p>&#x31;&#xfe0f;&#x20e3; <code>new workflow</code></p>
<p><code>进入仓库--&gt;Actions--&gt;new workflow</code>，可以选择Github推荐的workflow，或者<code>set up  a workflow yourself</code></p>
<p><img src="https://qiniu.anburger.site/post/image-20250809130637620.png" alt="image-20250809130637620"></p>
<p>创建<code>action-demo.yml</code>（也可以自己新建<code>.github/workflows</code>文件夹，在该文件夹下新建<code>.yml</code>文件配置新的workflow）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">GitHub Actions Demo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">run-name</span><span class="p">:</span><span class="w"> </span><span class="l">${{ github.actor }} is testing out GitHub Actions 🚀</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">push]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">Explore-GitHub-Actions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">echo &#34;🎉 The job was automatically triggered by a ${{ github.event_name }} event.&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">echo &#34;🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">echo &#34;🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Check out repository code</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">echo &#34;💡 The ${{ github.repository }} repository has been cloned to the runner.&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">echo &#34;🖥️ The workflow is now ready to test your code on the runner.&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">List files in the repository</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          ls ${{ github.workspace }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">echo &#34;🍏 This job&#39;s status is ${{ job.status }}.&#34;</span><span class="w">
</span></span></span></code></pre></div><p><img src="https://qiniu.anburger.site/post/image-20250809131408013.png" alt="image-20250809131408013"></p>
<p>该workflow被设置为当仓库<code>push</code>事件时触发，主要进行一些打印和将该仓库代码clone到我们的<code>Runner</code>中。点击<code>commit changes</code>后选择一种提交方式，则会push我们本次修改到仓库，同时也触发了新建的workflow。进入<code>Action</code>可以查看<code>workflow</code>执行结果：</p>
<p><img src="https://qiniu.anburger.site/post/image-20250809132725794.png" alt="image-20250809132725794"></p>
<p>&#x1f389;Congratulations! Actions的基本使用已经完成。在此基础上，可以通过更详细的配置自由控制你想执行Jobs。</p>
<h2 id="3-cicd">
<a class="header-anchor" href="#3-cicd"></a>
3 CI/CD
</h2><h3 id="31-continuous-integration-ci">
<a class="header-anchor" href="#31-continuous-integration-ci"></a>
3.1 Continuous Integration (CI)
</h3><blockquote>
<p>Continuous integration (CI) is a software practice that requires frequently committing code to a shared repository.</p></blockquote>
<blockquote>
<p>When you commit code to your repository, you can continuously build and test the code to make sure that the commit doesn&rsquo;t introduce errors.</p></blockquote>
<div class="post-link-card-wrap">
  <div class="post-link-card">
    <a href="https://docs.github.com/en/actions/tutorials/build-and-test-code" title="" rel="noopener external nofollow noreferrer" target="_blank"></a><div class="post-link-card-cover-wrap auto">
        <div class="icon-globe"></div>
      </div><div class="post-link-card-item-wrap">
      <div class="post-link-card-title"></div>
      <div class="post-link-card-excerpt">
        <span class="icon-link"></span>https://docs.github.com/en/actions/tutorials/build-and-test-code
      </div>
    </div>
  </div>
</div>

<p>&#x1f6a9;案例：<code>Java with Maven</code></p>
<p><code>进入仓库--&gt;Actions--&gt;new workflow</code>，搜索并选择<code>Java with Maven</code>。适当调整配置，例如修改Java版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Java CI with Maven</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">&#34;main&#34;</span><span class="w"> </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pull_request</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">&#34;main&#34;</span><span class="w"> </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Set up JDK 11</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/setup-java@v4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">java-version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;11&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">distribution</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;temurin&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">cache</span><span class="p">:</span><span class="w"> </span><span class="l">maven</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build with Maven</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">mvn -B package --file pom.xml</span><span class="w">
</span></span></span></code></pre></div><p>提交该workflow后，会因为push触发一次，若此时仓库中没有代码（pom.xml），将会运行失败。</p>
<p>两种触发事件：</p>
<p>&#x31;&#xfe0f;&#x20e3; push</p>
<p>push代码到主分支（我们提交一个可以正常运行的maven项目测试），等待执行完成后查看结果。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git pull origin main    <span class="c1"># 拉取远程最新代码</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git add .	<span class="c1"># 添加所有修改</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;first commit&#34;</span>	<span class="c1"># 提交到本地仓库</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git push -u origin main		<span class="c1"># 推送到远程main分支</span>
</span></span></code></pre></div><p><img src="https://qiniu.anburger.site/post/image-20250809174945421.png" alt="image-20250809174945421"></p>
<p><img src="https://qiniu.anburger.site/post/image-20250809175308575.png" alt="image-20250809175308575"></p>
<p>&#x32;&#xfe0f;&#x20e3; pull_request</p>
<p>我们设置一个Error，然后提交代码到新分支。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 如果是最新则不执行也行</span>
</span></span><span class="line"><span class="cl">git checkout main       <span class="c1"># 切换到主分支</span>
</span></span><span class="line"><span class="cl">git pull origin main    <span class="c1"># 拉取远程最新代码</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 创建并切换到新分支</span>
</span></span><span class="line"><span class="cl">git checkout -b your-branch-name 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git add .	<span class="c1"># 添加所有修改</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;testing ci error&#34;</span>	<span class="c1"># 提交到本地仓库</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git push -u origin your-branch-name 	<span class="c1"># 推送到远程</span>
</span></span></code></pre></div><p>进入github仓库，可以看到pull request提示：点击<code>Compare &amp; pull request</code>，并提交。</p>
<p><img src="https://qiniu.anburger.site/post/image-20250809181117509.png" alt="image-20250809181117509"></p>
<p>可以看到，我们的CI Action检测出了错误，我们就需要谨慎merge啦：</p>
<p><img src="https://qiniu.anburger.site/post/image-20250809181332473.png" alt="image-20250809181332473"></p>
<p><img src="https://qiniu.anburger.site/post/image-20250809181515738.png" alt="image-20250809181515738"></p>

        
        <hr><p>本文2025-08-08首发于<a href='https://anburger.site/'>Anby Demara's Homepage</a>，最后修改于2025-08-08</p>]]>
      </description>
      
        <category>笔记</category><category>Github</category>
      
    </item>
    
    

    <item>
      <title>JS笔记</title>
      <link>https://anburger.site/post/note-of-js-guide/</link>
      <pubDate>Thu, 07 Aug 2025 19:00:00 &#43;0800</pubDate>
      <author>yang_zc@aliyun.com (Anburger)</author>
      <guid>https://anburger.site/post/note-of-js-guide/</guid>
      <description>
        <![CDATA[<h1>JS笔记</h1><p>作者：Anburger（yang_zc@aliyun.com）</p>
        
          <h1 id="javascript学习笔记">
<a class="header-anchor" href="#javascript%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0"></a>
Javascript学习笔记
</h1><h2 id="1-异步javascript">
<a class="header-anchor" href="#1-%e5%bc%82%e6%ad%a5javascript"></a>
1 异步Javascript
</h2><h3 id="11-基于回调的异步">
<a class="header-anchor" href="#11-%e5%9f%ba%e4%ba%8e%e5%9b%9e%e8%b0%83%e7%9a%84%e5%bc%82%e6%ad%a5"></a>
1.1 基于回调的异步
</h3><blockquote>
<p>最基础的异步方式。</p></blockquote>
<ul>
<li>
<p>定时器</p>
<p>一定时间后执行某个函数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * param 1: function
</span></span></span><span class="line"><span class="cl"><span class="cm"> * param 2: delayed time (ms)
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;定时调用&#39;</span><span class="p">),</span> <span class="mi">5000</span><span class="p">);</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">* setTimeout只调用一次回调函数
</span></span></span><span class="line"><span class="cl"><span class="cm">* 如果要重复执行定时器，采用setInterval
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">customIntervalId</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;定时调用&#39;</span><span class="p">),</span> <span class="mi">1000</span><span class="p">);</span>  <span class="c1">// 每个1s调用一次
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">setTimeout</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">customIntervalId</span><span class="p">),</span> <span class="mi">5000</span><span class="p">);</span>  <span class="c1">// 5s后清除该setInterval
</span></span></span></code></pre></div></li>
<li>
<p>事件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// eg: click事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">blockElement</span> <span class="o">=</span> <span class="nx">xxx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">blockElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;clike&#39;</span><span class="p">,</span> <span class="nx">yourCallBack</span><span class="p">());</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="12-promise">
<a class="header-anchor" href="#12-promise"></a>
1.2 Promise
</h3><blockquote>
<p>一种为简化异步编程而设计的核心语言特性。（可以理解为Promise是一种简化的处理回调的方式。为什么需要简化：例如，普通回调方式如果出现多重嵌套回调）。</p></blockquote>
<blockquote>
<p>Promise是一个<strong>表示异步操作结果（完成/失败）的对象</strong>。Promise表示一次异步计算的未来结果。</p></blockquote>
<blockquote>
<p>Promise标准化了<strong>异步错误处理</strong>。</p></blockquote>
<h4 id="121-promise基本使用">
<a class="header-anchor" href="#121-promise%e5%9f%ba%e6%9c%ac%e4%bd%bf%e7%94%a8"></a>
1.2.1 Promise基本使用
</h4><p>Promise具有三种状态：</p>
<p>&#x31;&#xfe0f;&#x20e3; pending</p>
<p>&#x32;&#xfe0f;&#x20e3; fulfilled</p>
<p>&#x33;&#xfe0f;&#x20e3; rejected</p>
<pre class="mermaid">
  flowchart TD
	A(pending) -->|resolve| B(fulfiled)
	A -->|reject| C(rejected)
</pre><h5 id="1-创建promise">
<a class="header-anchor" href="#1-%e5%88%9b%e5%bb%bapromise"></a>
1 创建Promise
</h5><p><img src="https://qiniu.anburger.site/post/image-20250807224231555.png" alt="image-20250807224231555"></p>
<p>构造函数<code>Promise()</code>接收<strong>一个函数作为唯一参数</strong>，使用该函数对创建的Promise进行控制，该函数接收两个参数（通常名为resolve和reject，均为函数）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// 构造函数调用传入的函数，并为resolve和reject传入对应的函数值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">myPromise</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 异步执行逻辑...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="cm">/*操作成功*/</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 将 Promise 状态改为 fulfilled
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">resolve</span><span class="p">(</span><span class="cm">/*成功的返回结果*/</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 将 Promise 状态改为 rejectes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">reject</span><span class="p">(</span><span class="cm">/*失败的返回结果*/</span><span class="p">);</span>                      
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div>
        
        <hr><p>本文2025-08-07首发于<a href='https://anburger.site/'>Anby Demara's Homepage</a>，最后修改于2025-08-08</p>]]>
      </description>
      
        <category>笔记</category><category>Javascript</category>
      
    </item>
    
    

    <item>
      <title>Typora自定义图片上传服务</title>
      <link>https://anburger.site/post/custom-command-typora/</link>
      <pubDate>Fri, 08 Aug 2025 13:00:00 &#43;0800</pubDate>
      <author>yang_zc@aliyun.com (Anburger)</author>
      <guid>https://anburger.site/post/custom-command-typora/</guid>
      <description>
        <![CDATA[<h1>Typora自定义图片上传服务</h1><p>作者：Anburger（yang_zc@aliyun.com）</p>
        
          <p>Typora插入图片时可以将其自动上传到图床中，在之前的文章中介绍了使用<code>PicGO</code>作为上传服务。</p>
<div class="post-link-card-wrap">
  <div class="post-link-card">
    <a href="/post/picgo-typora/" title="PicGo实现Typora插入图片上传服务"></a><div class="post-link-card-cover-wrap">
        <img
          src="https://qiniu.anburger.site/cover/Tech.webp"
          class="no-lightbox"
          title="PicGo实现Typora插入图片上传服务"
          alt="PicGo实现Typora插入图片上传服务"
        />
      </div><div class="post-link-card-item-wrap">
      <div class="post-link-card-title">PicGo实现Typora插入图片上传服务</div>
      <div class="post-link-card-excerpt">现在已经有非常多的快速搭建博客站的工具，例如JeckII、Hexo、Hugo等，它们都具有非常优秀的使用体验，并且可以通过GitHub、CloudFlare等工具进行免费部署。利用它们成功搭建出自己的博客站后，往往使用Markdown进行博客内容撰写。在撰写过程中，我们会发现处理图片时会面临一些窘境：
</div>
    </div>
  </div>
</div>
<p>然而，在我实际使用中感觉<code>PicGO</code>稍微‘臃肿’，设置有时会卡死。</p>
<p>Typora支持图片上传服务使用自定义命令，简单描述即<strong>上传图片时，Typora会自动运行设置的自定义命令，并将图片路径作为参数传递</strong>。因此，我们可以使用电脑中存在的工具进行自定义该服务，例如<code>Python、GO、Nodejs</code>等。</p>
<h2 id="1-图片上传服务python">
<a class="header-anchor" href="#1-%e5%9b%be%e7%89%87%e4%b8%8a%e4%bc%a0%e6%9c%8d%e5%8a%a1python"></a>
1 图片上传服务&ndash;Python
</h2><p>从Typora命令执行逻辑分析，脚本的任务就是根据图片路径上传这些图片，然后将返回的图床 URL 输出到控制台，Typora 会自动用这些 URL 替换掉原来的本地路径。</p>
<p>&#x31;&#xfe0f;&#x20e3; 配置文件</p>
<p>写图床存在需要权限，我们将认证信息独立到配置文件中：<code>config.json</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;access_key&#34;</span><span class="p">:</span> <span class="s2">&#34;YOUR_ACCESS_KEY&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;secret_key&#34;</span><span class="p">:</span> <span class="s2">&#34;YOUR_SECRET_KEY&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;bucket_name&#34;</span><span class="p">:</span> <span class="s2">&#34;YOUR_BUKCET_NAME&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;domain&#34;</span><span class="p">:</span> <span class="s2">&#34;YOUR_DOMAIN&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;path&#34;</span><span class="p">:</span> <span class="s2">&#34;YOUR_PATH&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;compress&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;quality&#34;</span><span class="p">:</span> <span class="mi">80</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>&#x32;&#xfe0f;&#x20e3; 读取配置文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">load_config</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;加载配置文件&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">config_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="vm">__file__</span><span class="p">)),</span> <span class="s1">&#39;config.json&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">config_path</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">FileNotFoundError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;错误：找不到配置文件 config.json&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="n">json</span><span class="o">.</span><span class="n">JSONDecodeError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;错误：配置文件 config.json 格式不正确&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span></code></pre></div><p>&#x33;&#xfe0f;&#x20e3; 编写上传逻辑</p>
<p>上传到指定图床需要使用图床官方SDK，详细查看图床文档。以七牛<code>Python SDK</code>为例。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 安装七牛SDK</span>
</span></span><span class="line"><span class="cl"><span class="n">pip</span> <span class="n">install</span> <span class="n">qiniu</span>
</span></span></code></pre></div><p>上传：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">upload_to_qiniu</span><span class="p">(</span><span class="n">access_key</span><span class="p">,</span> <span class="n">secret_key</span><span class="p">,</span> <span class="n">bucket_name</span><span class="p">,</span> <span class="n">domain</span><span class="p">,</span> <span class="n">file_to_upload</span><span class="p">,</span> <span class="n">original_filename</span><span class="p">,</span> <span class="n">remote_path</span><span class="o">=</span><span class="s2">&#34;&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;上传单个文件到七牛云&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 构建鉴权对象</span>
</span></span><span class="line"><span class="cl">    <span class="n">q</span> <span class="o">=</span> <span class="n">Auth</span><span class="p">(</span><span class="n">access_key</span><span class="p">,</span> <span class="n">secret_key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 使用原始文件名构建在七牛云上保存的 key</span>
</span></span><span class="line"><span class="cl">    <span class="n">key</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">remote_path</span><span class="si">}{</span><span class="n">original_filename</span><span class="si">}</span><span class="s2">&#34;</span> <span class="k">if</span> <span class="n">remote_path</span> <span class="k">else</span> <span class="n">original_filename</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 生成上传 Token</span>
</span></span><span class="line"><span class="cl">    <span class="n">token</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">upload_token</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="mi">3600</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 上传处理后（可能被压缩）的文件</span>
</span></span><span class="line"><span class="cl">    <span class="n">ret</span><span class="p">,</span> <span class="n">info</span> <span class="o">=</span> <span class="n">put_file</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">file_to_upload</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">ret</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span> <span class="ow">and</span> <span class="n">ret</span><span class="p">[</span><span class="s1">&#39;key&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 上传成功，返回 URL</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 确保域名末尾没有 /，路径开头没有 /</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">domain</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">key</span><span class="o">.</span><span class="n">lstrip</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 上传失败</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;上传失败: </span><span class="si">{</span><span class="n">info</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">None</span>
</span></span></code></pre></div><p>&#x34;&#xfe0f;&#x20e3; 扩展功能</p>
<p>在上传图片到图床前，我们可以对其进行压缩、添加水印等操作。这里以压缩功能为例。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 使用Pillow提供的功能进行压缩</span>
</span></span><span class="line"><span class="cl">pip install Pillow
</span></span></code></pre></div><p>压缩：</p>
<pre class="mermaid">
  flowchart TD
	A[原图] -->|tempfile| B(临时图片)
	B --> C{格式}
	C -->|JPEG,JPG| D[有损压缩]
	C -->|PNG| E[无损压缩]
	C -->|Ohter| F[不压缩]
</pre><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">compress_image</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">quality</span><span class="o">=</span><span class="mi">80</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;压缩图片，保持原格式，并返回临时文件路径&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">img</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">original_format</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">format</span> <span class="ow">or</span> <span class="s1">&#39;JPEG&#39;</span> <span class="c1"># 如果格式未知，默认为JPEG</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1"># 获取原始文件扩展名</span>
</span></span><span class="line"><span class="cl">        <span class="n">_</span><span class="p">,</span> <span class="n">ext</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">splitext</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="ow">not</span> <span class="n">ext</span><span class="p">:</span> <span class="c1"># 如果没有扩展名，根据图片格式来定</span>
</span></span><span class="line"><span class="cl">            <span class="n">ext</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;.</span><span class="si">{</span><span class="n">original_format</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># 创建一个与原文件同扩展名的临时文件</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp_fd</span><span class="p">,</span> <span class="n">temp_path</span> <span class="o">=</span> <span class="n">tempfile</span><span class="o">.</span><span class="n">mkstemp</span><span class="p">(</span><span class="n">suffix</span><span class="o">=</span><span class="n">ext</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">os</span><span class="o">.</span><span class="n">close</span><span class="p">(</span><span class="n">temp_fd</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># 根据不同格式应用不同压缩参数</span>
</span></span><span class="line"><span class="cl">        <span class="n">save_options</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">original_format</span> <span class="ow">in</span> <span class="p">[</span><span class="s1">&#39;JPEG&#39;</span><span class="p">,</span> <span class="s1">&#39;JPG&#39;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="n">save_options</span><span class="p">[</span><span class="s1">&#39;quality&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">quality</span>
</span></span><span class="line"><span class="cl">            <span class="n">save_options</span><span class="p">[</span><span class="s1">&#39;format&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;JPEG&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">original_format</span> <span class="o">==</span> <span class="s1">&#39;PNG&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">save_options</span><span class="p">[</span><span class="s1">&#39;optimize&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span> <span class="c1"># 无损压缩</span>
</span></span><span class="line"><span class="cl">            <span class="n">save_options</span><span class="p">[</span><span class="s1">&#39;format&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;PNG&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span> <span class="c1"># 其他格式（如GIF, WEBP等）直接保存</span>
</span></span><span class="line"><span class="cl">            <span class="n">save_options</span><span class="p">[</span><span class="s1">&#39;format&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">original_format</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">img</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">temp_path</span><span class="p">,</span> <span class="o">**</span><span class="n">save_options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">temp_path</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;压缩图片失败: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 如果压缩失败，返回原图路径，避免上传中断</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">file_path</span>
</span></span></code></pre></div><p>只支持<code>JPEG、JPG、PNG</code>压缩。且压缩质量只对<code>JPEG、JPG</code>生效，有损压缩。而<code>PNG</code>采用无损压缩。</p>
<p>&#x35;&#xfe0f;&#x20e3; 完整代码</p>
<div class="post-link-card-wrap">
  <div class="post-link-card">
    <a href="https://github.com/anbydemara/typora-uploader" title="typora-uploader" rel="noopener external nofollow noreferrer" target="_blank"></a><div class="post-link-card-cover-wrap auto">
        <div class="icon-globe"></div>
      </div><div class="post-link-card-item-wrap">
      <div class="post-link-card-title">typora-uploader</div>
      <div class="post-link-card-excerpt">
        <span class="icon-link"></span>https://github.com/anbydemara/typora-uploader
      </div>
    </div>
  </div>
</div>

<h2 id="2-typora配置">
<a class="header-anchor" href="#2-typora%e9%85%8d%e7%bd%ae"></a>
2 Typora配置
</h2><p><code>文件-&gt;偏好设置</code>，选择<code>图像</code>，上传服务选择<code>Custom Command</code>，命令<code>python &quot;your_local_path\typora-uploader.py&quot;</code>。</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>配置完成后，可以点击<code>验证图片上传选项</code>，它会上传两张默认图像进行测试。</p>
<p>&#x1f389;Congratulations! Typora自定义上传服务配置完成。</p>

        
        <hr><p>本文2025-08-08首发于<a href='https://anburger.site/'>Anby Demara's Homepage</a>，最后修改于2025-08-08</p>]]>
      </description>
      
        <category>自动化工具</category>
      
    </item>
    
    

    <item>
      <title>Nodejs笔记</title>
      <link>https://anburger.site/post/note-of-nodejs/</link>
      <pubDate>Thu, 07 Aug 2025 19:00:00 &#43;0800</pubDate>
      <author>yang_zc@aliyun.com (Anburger)</author>
      <guid>https://anburger.site/post/note-of-nodejs/</guid>
      <description>
        <![CDATA[<h1>Nodejs笔记</h1><p>作者：Anburger（yang_zc@aliyun.com）</p>
        
          <h1 id="nodejs学习笔记">
<a class="header-anchor" href="#nodejs%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0"></a>
Nodejs学习笔记
</h1><h2 id="1-简介">
<a class="header-anchor" href="#1-%e7%ae%80%e4%bb%8b"></a>
1 简介
</h2><p>官方文档：</p>
<div class="post-link-card-wrap">
  <div class="post-link-card">
    <a href="https://nodejs.org/docs/latest/api/" title="Nodejs官方文档" rel="noopener external nofollow noreferrer" target="_blank"></a><div class="post-link-card-cover-wrap auto">
        <div class="icon-globe"></div>
      </div><div class="post-link-card-item-wrap">
      <div class="post-link-card-title">Nodejs官方文档</div>
      <div class="post-link-card-excerpt">
        <span class="icon-link"></span>https://nodejs.org/docs/latest/api/
      </div>
    </div>
  </div>
</div>

<blockquote>
<p>Node.js is a JavaScript runtime built on the <a href="https://v8.dev/">V8 JavaScript engine</a>.</p></blockquote>
<p>下载&amp;安装：</p>
<div class="post-link-card-wrap">
  <div class="post-link-card">
    <a href="https://nodejs.org/en/download" title="Nodejs下载" rel="noopener external nofollow noreferrer" target="_blank"></a><div class="post-link-card-cover-wrap auto">
        <div class="icon-globe"></div>
      </div><div class="post-link-card-item-wrap">
      <div class="post-link-card-title">Nodejs下载</div>
      <div class="post-link-card-excerpt">
        <span class="icon-link"></span>https://nodejs.org/en/download
      </div>
    </div>
  </div>
</div>

<h2 id="2-quick-start">
<a class="header-anchor" href="#2-quick-start"></a>
2 Quick Start
</h2><p>&#x31;&#xfe0f;&#x20e3;新建空项目<code>first-node</code></p>
<p>&#x32;&#xfe0f;&#x20e3;项目下新建文件<code>hello.js</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;node:http&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">hostname</span> <span class="o">=</span> <span class="s1">&#39;localhost&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="mi">8080</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">((</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Hello, World!\n&#39;</span><span class="p">);</span>  
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="nx">hostname</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Server running at http://</span><span class="si">${</span><span class="nx">hostname</span><span class="si">}</span><span class="sb">:</span><span class="si">${</span><span class="nx">port</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>&#x33;&#xfe0f;&#x20e3;运行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">node hello.js
</span></span></code></pre></div><p>运行结果如下，浏览器访问该url可以得到返回结果<code>Hello, World!</code>：</p>
<p><img src="https://qiniu.anburger.site/post/image-20250807191737364.png" alt="image-20250807191737364"><img src="https://qiniu.anburger.site/post/image-20250807191905346.png" alt="image-20250807191905346"></p>
<p>&#x1f389;Congratulations！</p>
<h2 id="x-数据库操作">
<a class="header-anchor" href="#x-%e6%95%b0%e6%8d%ae%e5%ba%93%e6%93%8d%e4%bd%9c"></a>
X 数据库操作
</h2><h3 id="x1-sqlite">
<a class="header-anchor" href="#x1-sqlite"></a>
X.1 SQLite
</h3>
        
        <hr><p>本文2025-08-07首发于<a href='https://anburger.site/'>Anby Demara's Homepage</a>，最后修改于2025-08-07</p>]]>
      </description>
      
        <category>笔记</category><category>Nodejs</category>
      
    </item>
    
    

    <item>
      <title>WSL笔记</title>
      <link>https://anburger.site/post/note-of-wsl/</link>
      <pubDate>Sun, 03 Aug 2025 21:00:00 &#43;0800</pubDate>
      <author>yang_zc@aliyun.com (Anburger)</author>
      <guid>https://anburger.site/post/note-of-wsl/</guid>
      <description>
        <![CDATA[<h1>WSL笔记</h1><p>作者：Anburger（yang_zc@aliyun.com）</p>
        
          <h2 id="1-安装">
<a class="header-anchor" href="#1-%e5%ae%89%e8%a3%85"></a>
1 安装
</h2><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 默认安装Unbuntu</span>
</span></span><span class="line"><span class="cl">wsl --install
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 安装其他分发版</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 查看其他分发版</span>
</span></span><span class="line"><span class="cl">wsl --list --online
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 安装指定分发版</span>
</span></span><span class="line"><span class="cl">wsl --install -d Debian
</span></span></code></pre></div><h2 id="2-备份卸载">
<a class="header-anchor" href="#2-%e5%a4%87%e4%bb%bd%e5%8d%b8%e8%bd%bd"></a>
2 备份、卸载
</h2><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 备份</span>
</span></span><span class="line"><span class="cl">wsl --export Debian debian.tar
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 卸载</span>
</span></span><span class="line"><span class="cl">wsl --unregister Debian
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 从备份导入</span>
</span></span><span class="line"><span class="cl">wsl --import Debian D:/wsl .<span class="se">\d</span>ebian.tar
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 关闭wsl子系统</span>
</span></span><span class="line"><span class="cl">wsl --shutdown
</span></span></code></pre></div><h2 id="3-docker安装">
<a class="header-anchor" href="#3-docker%e5%ae%89%e8%a3%85"></a>
3 Docker安装
</h2><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 下载并执行Docker官方安装脚本</span>
</span></span><span class="line"><span class="cl">curl -fsSL https://get.docker.com -o get-docker.sh
</span></span><span class="line"><span class="cl">sudo sh get-docker.sh    <span class="c1"># 执行后会推荐下载Docker Desktop版，需等待20s</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 启动Docker服务</span>
</span></span><span class="line"><span class="cl">sudo systemctl start docker
</span></span><span class="line"><span class="cl">sudo systemctl <span class="nb">enable</span> docker
</span></span></code></pre></div><h2 id="4-配置">
<a class="header-anchor" href="#4-%e9%85%8d%e7%bd%ae"></a>
4 配置
</h2><p>在用户目录下<code>C:\Users\username</code>新建全局配置文件<code>.wslconfig</code></p>
<h3 id="41-网络模式">
<a class="header-anchor" href="#41-%e7%bd%91%e7%bb%9c%e6%a8%a1%e5%bc%8f"></a>
4.1 网络模式
</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[wsl2]
</span></span><span class="line"><span class="cl">networkingMode=mirrored
</span></span></code></pre></div>
        
        <hr><p>本文2025-08-03首发于<a href='https://anburger.site/'>Anby Demara's Homepage</a>，最后修改于2025-08-03</p>]]>
      </description>
      
        <category>笔记</category><category>WSL</category><category>Windows</category>
      
    </item>
    
    

    <item>
      <title>什么是云函数</title>
      <link>https://anburger.site/post/what-is-cloud-function/</link>
      <pubDate>Fri, 01 Aug 2025 16:55:00 &#43;0800</pubDate>
      <author>yang_zc@aliyun.com (Anburger)</author>
      <guid>https://anburger.site/post/what-is-cloud-function/</guid>
      <description>
        <![CDATA[<h1>什么是云函数</h1><p>作者：Anburger（yang_zc@aliyun.com）</p>
        
          <h2 id="什么是云函数">
<a class="header-anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e4%ba%91%e5%87%bd%e6%95%b0"></a>
什么是云函数？
</h2><p>云函数（Cloud Function），也称为无服务器计算（Serverless Computing）或函数即服务（Function-as-a-Service, FaaS），是一种事件驱动的计算服务。它允许您编写和运行代码，而无需管理自己的服务器。</p>
<h3 id="核心思想">
<a class="header-anchor" href="#%e6%a0%b8%e5%bf%83%e6%80%9d%e6%83%b3"></a>
核心思想
</h3><p>云函数的核心思想是 <strong>“只在需要时运行”</strong>。您只需上传您的代码（一个函数），云服务提供商会负责处理其他所有事情，包括：</p>
<ul>
<li><strong>服务器管理</strong>：您不需要购买、配置或维护任何物理或虚拟服务器。</li>
<li><strong>自动扩缩容</strong>：当函数被调用时，云平台会自动分配计算资源来运行它。如果有很多并发请求，平台会自动扩展以处理负载。当没有请求时，不会有任何资源在运行，因此您也无需付费。</li>
<li><strong>事件驱动</strong>：函数通常由特定事件触发，例如：
<ul>
<li>HTTP 请求（API 网关）</li>
<li>文件上传到对象存储（如 AWS S3, 阿里云 OSS）</li>
<li>数据库中的数据发生变化</li>
<li>消息队列中的新消息</li>
<li>定时任务（Cron Job）</li>
</ul>
</li>
</ul>
<h3 id="主要优势">
<a class="header-anchor" href="#%e4%b8%bb%e8%a6%81%e4%bc%98%e5%8a%bf"></a>
主要优势
</h3><ol>
<li><strong>降低成本</strong>：您只需为代码实际运行的时间付费，精确到毫秒。当代码不运行时，不产生任何费用。这对于流量不稳定的应用来说尤其划算。</li>
<li><strong>简化运维</strong>：开发者可以专注于编写核心业务逻辑，而无需担心服务器的配置、补丁、安全和扩展性问题。</li>
<li><strong>高可用性和弹性</strong>：云服务提供商通常会在多个可用区运行您的函数，确保高可用性。同时，根据请求量自动伸缩，轻松应对流量高峰。</li>
<li><strong>快速开发和部署</strong>：您可以快速地将单个函数部署到云端，并将其集成到现有应用中，大大缩短了开发周期。</li>
</ol>
<h3 id="常见用例">
<a class="header-anchor" href="#%e5%b8%b8%e8%a7%81%e7%94%a8%e4%be%8b"></a>
常见用例
</h3><ul>
<li><strong>Web API 和后端服务</strong>：为移动应用或 Web 应用提供 RESTful API。</li>
<li><strong>数据处理</strong>：当新数据（如图片、视频、日志文件）上传到存储服务时，自动触发函数进行处理、转换或分析。</li>
<li><strong>实时消息和通知</strong>：处理来自物联网设备的数据流，或在特定事件发生时发送实时通知。</li>
<li><strong>定时任务</strong>：执行定期的清理工作、数据备份或报告生成。</li>
<li><strong>胶水代码</strong>：将不同的云服务或第三方 API 连接在一起，形成一个完整的工作流。</li>
</ul>
<h3 id="主流云函数平台">
<a class="header-anchor" href="#%e4%b8%bb%e6%b5%81%e4%ba%91%e5%87%bd%e6%95%b0%e5%b9%b3%e5%8f%b0"></a>
主流云函数平台
</h3><ul>
<li><strong>AWS Lambda</strong>：亚马逊推出的业界领先的无服务器计算平台。</li>
<li><strong>Azure Functions</strong>：微软 Azure 提供的云函数服务。</li>
<li><strong>Google Cloud Functions</strong>：谷歌云的事件驱动计算服务。</li>
<li><strong>阿里云函数计算 (FC)</strong>：阿里巴巴集团提供的无服务器计算服务。</li>
<li><strong>腾讯云云函数 (SCF)</strong>：腾讯云提供的 Serverless 计算服务。</li>
</ul>
<h3 id="总结">
<a class="header-anchor" href="#%e6%80%bb%e7%bb%93"></a>
总结
</h3><p>云函数是现代云计算架构的重要组成部分，它通过将计算资源抽象为按需执行的函数，极大地简化了应用的开发和运维。对于希望快速构建、部署和扩展应用的开发者来说，云函数是一个非常强大和高效的工具。</p>

        
        <hr><p>本文2025-08-01首发于<a href='https://anburger.site/'>Anby Demara's Homepage</a>，最后修改于2025-08-01</p>]]>
      </description>
      
    </item>
    
    

    <item>
      <title>常用技术文档合集</title>
      <link>https://anburger.site/post/tech-docs/</link>
      <pubDate>Fri, 01 Aug 2025 12:00:00 &#43;0800</pubDate>
      <author>yang_zc@aliyun.com (Anburger)</author>
      <guid>https://anburger.site/post/tech-docs/</guid>
      <description>
        <![CDATA[<h1>常用技术文档合集</h1><p>作者：Anburger（yang_zc@aliyun.com）</p>
        
          <div class="post-link-card-wrap">
  <div class="post-link-card">
    <a href="https://nodejs.org/docs/latest/api/" title="Nodejs Api" rel="noopener external nofollow noreferrer" target="_blank"></a><div class="post-link-card-cover-wrap auto">
        <div class="icon-globe"></div>
      </div><div class="post-link-card-item-wrap">
      <div class="post-link-card-title">Nodejs Api</div>
      <div class="post-link-card-excerpt">
        <span class="icon-link"></span>https://nodejs.org/docs/latest/api/
      </div>
    </div>
  </div>
</div>

<hr>
<div class="post-link-card-wrap">
  <div class="post-link-card">
    <a href="https://cn.vitejs.dev/guide/" title="Vite" rel="noopener external nofollow noreferrer" target="_blank"></a><div class="post-link-card-cover-wrap auto">
        <div class="icon-globe"></div>
      </div><div class="post-link-card-item-wrap">
      <div class="post-link-card-title">Vite</div>
      <div class="post-link-card-excerpt">
        <span class="icon-link"></span>https://cn.vitejs.dev/guide/
      </div>
    </div>
  </div>
</div>

<div class="post-link-card-wrap">
  <div class="post-link-card">
    <a href="https://cn.vuejs.org/guide/" title="Vue" rel="noopener external nofollow noreferrer" target="_blank"></a><div class="post-link-card-cover-wrap auto">
        <div class="icon-globe"></div>
      </div><div class="post-link-card-item-wrap">
      <div class="post-link-card-title">Vue</div>
      <div class="post-link-card-excerpt">
        <span class="icon-link"></span>https://cn.vuejs.org/guide/
      </div>
    </div>
  </div>
</div>

<hr>
<div class="post-link-card-wrap">
  <div class="post-link-card">
    <a href="https://redis.io/docs/latest/commands/" title="Redis Commands" rel="noopener external nofollow noreferrer" target="_blank"></a><div class="post-link-card-cover-wrap auto">
        <div class="icon-globe"></div>
      </div><div class="post-link-card-item-wrap">
      <div class="post-link-card-title">Redis Commands</div>
      <div class="post-link-card-excerpt">
        <span class="icon-link"></span>https://redis.io/docs/latest/commands/
      </div>
    </div>
  </div>
</div>


        
        <hr><p>本文2025-08-01首发于<a href='https://anburger.site/'>Anby Demara's Homepage</a>，最后修改于2025-08-01</p>]]>
      </description>
      
    </item>
    
    

    <item>
      <title>摘录</title>
      <link>https://anburger.site/post/excerpts-quotes/</link>
      <pubDate>Fri, 25 Jul 2025 12:00:00 &#43;0800</pubDate>
      <author>yang_zc@aliyun.com (Anburger)</author>
      <guid>https://anburger.site/post/excerpts-quotes/</guid>
      <description>
        <![CDATA[<h1>摘录</h1><p>作者：Anburger（yang_zc@aliyun.com）</p>
        
          <h1 id="reading">
<a class="header-anchor" href="#reading"></a>
Reading
</h1><h2 id="傲慢与偏见">
<a class="header-anchor" href="#%e5%82%b2%e6%85%a2%e4%b8%8e%e5%81%8f%e8%a7%81"></a>
《傲慢与偏见》
</h2><blockquote>
<p>我们都生性不爱交际，沉默寡言，不愿开口，除非我们预料说出话来可以语惊四座，像格言一样光彩夺目，流传千古。</p>
<p>这就是旅伴相得。</p></blockquote>
<h2 id="龙族">
<a class="header-anchor" href="#%e9%be%99%e6%97%8f"></a>
《龙族》
</h2><blockquote>
<p>同一条路，和某些人一起走，就长得离谱，和另外一些人走，就短得让人舍不得迈步子。</p></blockquote>
<blockquote>
<p>这个世界真孤独，在水下80米，你孤独得像独自站在一个星球上，没人听得见你说话，你可以放声大喊，然而无人在意。</p></blockquote>
<blockquote>
<p>比孤独更可悲的事情，就是根本不知道自己很孤独，或者发明很孤独，却把自己都骗得相信自己不孤独。</p></blockquote>
<blockquote>
<p>喜欢一个人那么久，那个人就和自己的过去捆在一起了，要是后悔以前喜欢谁，不就是把自己对以前的时间都否定了吗？</p></blockquote>
<blockquote>
<p>所谓无悔之爱应该是那样一种东西吧&hellip;未必要完美无缺，未必要有好结果，但多年之后你在人海中忽然抬起头来，见远处她独立如礁石，你忽然惊悸忽然震动忽然潸然泪下，速度快到来不及恨或者悲伤。</p></blockquote>
<h2 id="月亮与六便士">
<a class="header-anchor" href="#%e6%9c%88%e4%ba%ae%e4%b8%8e%e5%85%ad%e4%be%bf%e5%a3%ab"></a>
《月亮与六便士》
</h2><blockquote>
<p>卑鄙与伟大，恶毒与仁慈，仇恨与热爱，是可以保存于同一颗心灵里的。</p></blockquote>
<blockquote>
<p>对这个问题的回答取决于你赋予生活什么样的含义，你对社会要尽什么样的义务，以及你对自己有什么样的要求。</p></blockquote>
<h2 id="白夜行">
<a class="header-anchor" href="#%e7%99%bd%e5%a4%9c%e8%a1%8c"></a>
《白夜行》
</h2><blockquote>
<p>他们只是想保护自己的灵魂。结果，雪穗从不以真面目示人，亮司则至今仍在黑暗的通风管中徘徊。</p></blockquote>
<blockquote>
<p>一天当中，有太阳升起的时候，也有下沉的时候。人生也一样，有白天和黑夜，只是不会像真正的太阳那样，有定时的日出和日落。看个人，有些人一辈子都活在太阳的照耀下，也有些人不得不一直活在漆黑的深夜里。人害怕的，就是本来一直存在的太阳落下不再升起，也就是非常害怕原本照在身上的光芒。</p></blockquote>
<blockquote>
<p>我的天空里没有太阳，总是黑夜，但并不暗，因为有东西代替了太阳。虽然没有太阳那么明亮，但对我来说已经足够。凭借着这份光，我便能把黑夜当成白天。</p></blockquote>
<h2 id="重庆森林">
<a class="header-anchor" href="#%e9%87%8d%e5%ba%86%e6%a3%ae%e6%9e%97"></a>
《重庆森林》
</h2><blockquote>
<p>不知道从什么时候开始，在每个东西上面都有一个日子，秋刀鱼会过期，肉酱也会过期，连保鲜纸都会过期。我开始怀疑，在这个世界上，还有什么东西是不会过期的？</p></blockquote>
<blockquote>
<p>如果记忆也是一个罐头的话，我希望这罐罐头不会过期，如果一定要加一个日子的话，我希望它是一万年。</p></blockquote>

        
        <hr><p>本文2025-07-25首发于<a href='https://anburger.site/'>Anby Demara's Homepage</a>，最后修改于2025-07-25</p>]]>
      </description>
      
        <category>笔记</category><category>摘录</category>
      
    </item>
    
    

    <item>
      <title>Webhook实现Github自动推送到Linux自动部署</title>
      <link>https://anburger.site/post/webhook-github/</link>
      <pubDate>Wed, 23 Jul 2025 10:00:00 &#43;0800</pubDate>
      <author>yang_zc@aliyun.com (Anburger)</author>
      <guid>https://anburger.site/post/webhook-github/</guid>
      <description>
        <![CDATA[<h1>Webhook实现Github自动推送到Linux自动部署</h1><p>作者：Anburger（yang_zc@aliyun.com）</p>
        
          <p>&#x2600;&#xfe0f; 场景：<code>Github</code>中代码更新后自动推送到服务器并部署</p>
<p>&#x1f527; 工具：<code>Webhook</code>​</p>
<h2 id="1-github配置webhook">
<a class="header-anchor" href="#1-github%e9%85%8d%e7%bd%aewebhook"></a>
1. Github配置Webhook
</h2><p>&#x1f4cd;例如我在<a href="https://github.com/anbydemara/anbydemara.github.io">anbydemara.github.io</a>该仓库中存储了我的静态博客网站，我希望当我<code>push</code>到该仓库时，<code>Github</code>自动通知我的服务器并执行自定义指令。</p>
<p>&#x31;&#xfe0f;&#x20e3; ​进入<code>Github</code>仓库，<code>Settings-&gt;Webhooks-&gt;Add webhook</code></p>
<p><img src="https://qiniu.anburger.site/post/image-20250723111230291.png" alt="image-20250723111230291"></p>
<p>&#x32;&#xfe0f;&#x20e3; 填写配置信息</p>
<ul>
<li>
<p><code>PayLoad URL</code>：<code>http://your_servier_ip:port/path/{id}</code>，其中<code>port:9000，path:hooks</code>都是默认值，我们保存不变。修改修改为自己的ip地址，并且为该<code>Payload</code>自定义一个<code>id</code></p>
</li>
<li>
<p><code>Content type</code>：选择<code>application/json</code>格式</p>
</li>
<li>
<p><code>Secret</code>：设置自己的<code>Secret token</code>用于验证，可以使用一个随机字符串</p>
</li>
<li>
<p><code>webhook</code>触发条件：<code>Just push event</code>表示push代码到仓库时触发，可以自定义其他事件</p>
<p>其他保持默认，最后<code>Update webhook</code>：</p>
</li>
</ul>
<p><img src="https://qiniu.anburger.site/post/image-20250723111759923.png" alt="image-20250723111759923"></p>
<h2 id="2-服务器创建hook">
<a class="header-anchor" href="#2-%e6%9c%8d%e5%8a%a1%e5%99%a8%e5%88%9b%e5%bb%bahook"></a>
2. 服务器创建hook
</h2><p>&#x1f4cd;我们使用<a href="https://github.com/adnanh/webhook">webhook</a>工具：</p>
<blockquote>
<p><a href="https://github.com/adnanh/webhook">webhook</a> is a lightweight configurable tool written in Go, that allows you to easily create HTTP endpoints (hooks) on your server, which you can use to execute configured commands. You can also pass data from the HTTP request (such as headers, payload or query variables) to your commands. <a href="https://github.com/adnanh/webhook">webhook</a> also allows you to specify rules which have to be satisfied in order for the hook to be triggered.</p></blockquote>
<h3 id="21-安装">
<a class="header-anchor" href="#21-%e5%ae%89%e8%a3%85"></a>
2.1 安装
</h3><p>See：<a href="https://github.com/adnanh/webhook/blob/master/README.md">webhook/README.md at master · adnanh/webhook</a></p>
<p>我的安装目录为<code>/usr/local/src/webhook/</code>，安装成功后，该文件夹下有一个名为<code>webhook</code>的文件，我们为其添加执行权限<code>chmod +x webhook</code></p>
<h3 id="22-配置hook">
<a class="header-anchor" href="#22-%e9%85%8d%e7%bd%aehook"></a>
2.2 配置hook
</h3><p>&#x31;&#xfe0f;&#x20e3; 新建<code>hook.json</code>（自定义路径，这里存放在webhook安装目录下新建的<code>my-scripts</code>文件夹中）</p>
<p>该文件配置了一些规则，主要用于请求校验。在<code>Github</code>中我们配置了仓库<code>push</code>事件时，将使用<code>webhook</code>功能发送一个<code>POST</code>请求。在服务器上安装了<code>webhook</code>后，就可以监听对应的端口处理该请求。为了确保接受到的请求是<code>Github</code>触发指定事件时发送的，需进行校验：</p>
<ul>
<li><code>id</code>：需要与<code>Github</code>中配置<code>PayLoad URL</code>时指定的<code>id</code>一致</li>
<li><code>execute-command</code>：自定义执行脚本文件路径，请求校验成功后要执行的脚本，这里我在<code>/usr/local/src/webhook/my-scripts</code>新建了一个<code>rebuildblog.sh</code>脚本</li>
<li><code>secret</code>：需与<code>Github</code>中配置的一致</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;anburger-blog-rebuild&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;execute-command&#34;</span><span class="p">:</span> <span class="s2">&#34;/usr/local/src/webhook/my-scripts/rebuildblog.sh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;trigger-rule&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;and&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;match&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;payload-hmac-sha1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;secret&#34;</span><span class="p">:</span> <span class="s2">&#34;yoursecret&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;parameter&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;header&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;X-Hub-Signature&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;match&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;value&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="s2">&#34;refs/heads/main&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;parameter&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">              <span class="nt">&#34;source&#34;</span><span class="p">:</span> <span class="s2">&#34;payload&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">              <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;ref&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>&#x32;&#xfe0f;&#x20e3; 新建执行脚本<code>rebuildblog.sh</code>（自定义路径，这里存放在webhook安装目录下新建的<code>my-scripts</code>文件夹中）</p>
<p>通过上一步<code>hook.json</code>校验后，将自动执行该脚本，我们可以在这里执行部署任务</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nb">cd</span> /root/docker/nginx/html/
</span></span><span class="line"><span class="cl"><span class="c1"># 执行你的指令，简单示例</span>
</span></span><span class="line"><span class="cl">git pull origin main  <span class="c1"># 从github拉取新代码</span>
</span></span><span class="line"><span class="cl">docker restart nginx  <span class="c1"># 重启nginx    </span>
</span></span></code></pre></div><p>给脚本增加执行权限<code>chmod +x rebuildblog.sh</code></p>
<p>&#x33;&#xfe0f;&#x20e3; 启动<code>webhook</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 进入webhook安装路径</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /usr/local/src/webhook
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 启动webhook，只当hook.json，默认监听9000端口</span>
</span></span><span class="line"><span class="cl">./webhook -hooks ./my-scripts/hooks.json -verbose
</span></span></code></pre></div><p><img src="https://qiniu.anburger.site/post/image-20250726212413583.png" alt="image-20250726212413583"></p>
<p>测试：<code>push</code>代码到仓库后，成功执行脚本</p>
<p><img src="https://qiniu.anburger.site/post/image-20250726212624165.png" alt="image-20250726212624165"></p>
<p>到这里，我们便实现了<code>push</code>代码到<code>Github</code>，自动通知服务器并执行相应指令的基本过程。接下来设置webhook为自启动服务。</p>
<h2 id="3-设置开机自启动">
<a class="header-anchor" href="#3-%e8%ae%be%e7%bd%ae%e5%bc%80%e6%9c%ba%e8%87%aa%e5%90%af%e5%8a%a8"></a>
3. 设置开机自启动
</h2><p>&#x31;&#xfe0f;&#x20e3; 创建服务：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">vi /etc/systemd/system/webhook.service
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>Unit<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Description</span><span class="o">=</span>Webhook Service
</span></span><span class="line"><span class="cl"><span class="nv">After</span><span class="o">=</span>network.target
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Service<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Type</span><span class="o">=</span>simple
</span></span><span class="line"><span class="cl"><span class="nv">User</span><span class="o">=</span>root
</span></span><span class="line"><span class="cl"><span class="nv">WorkingDirectory</span><span class="o">=</span>/usr/local/src/webhook
</span></span><span class="line"><span class="cl"><span class="nv">ExecStart</span><span class="o">=</span>/usr/local/src/webhook/webhook -hooks ./my-scripts/hooks.json -verbose
</span></span><span class="line"><span class="cl"><span class="nv">Restart</span><span class="o">=</span>always
</span></span><span class="line"><span class="cl"><span class="nv">RestartSec</span><span class="o">=</span>5s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Install<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</span></span></code></pre></div><p>&#x32;&#xfe0f;&#x20e3; 启动服务：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 重新加载systemd</span>
</span></span><span class="line"><span class="cl">systemctl daemon-reload
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 启动服务</span>
</span></span><span class="line"><span class="cl">systemctl start webhook
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 设置开机自启动</span>
</span></span><span class="line"><span class="cl">systemctl <span class="nb">enable</span> webhook
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看服务状态</span>
</span></span><span class="line"><span class="cl">systemctl status webhook
</span></span></code></pre></div><p>&#x1f389; Congratulations! 我们已经实现基本的自动化部署了，你可以尽情的在此基础上进行扩展，例如​完善请求校验处理、按需求撰写你的执行脚本等。</p>

        
        <hr><p>本文2025-07-23首发于<a href='https://anburger.site/'>Anby Demara's Homepage</a>，最后修改于2025-07-23</p>]]>
      </description>
      
        <category>自动化工具</category><category>Github</category>
      
    </item>
    
    

    <item>
      <title>CauseHSI项目说明</title>
      <link>https://anburger.site/post/causehsi-readme/</link>
      <pubDate>Mon, 21 Jul 2025 22:57:57 &#43;0800</pubDate>
      <author>yang_zc@aliyun.com (Anburger)</author>
      <guid>https://anburger.site/post/causehsi-readme/</guid>
      <description>
        <![CDATA[<h1>CauseHSI项目说明</h1><p>作者：Anburger（yang_zc@aliyun.com）</p>
        
          <h1 id="1-简介">
<a class="header-anchor" href="#1-%e7%ae%80%e4%bb%8b"></a>
1 简介
</h1><p>CauseHSI项目为论文CauseHSI: Cross-scene Hyperspectral image classifaction via Causal Disentanglement提供代码实现。CauseHSI用于高光谱图像跨场景分类任务，其架构图如下：</p>
<p><img src="https://qiniu.anburger.site/post/image-20250724193644712.png" alt="image-20250724193644712"></p>
<p>CauseHSI主要分为两个部分：生成模块Generation Module(CGM)和因果解耦模块Causal Disentanglement Module(CDM)</p>
<h1 id="2-使用">
<a class="header-anchor" href="#2-%e4%bd%bf%e7%94%a8"></a>
2. 使用
</h1><h2 id="21-准备">
<a class="header-anchor" href="#21-%e5%87%86%e5%a4%87"></a>
2.1 准备
</h2><h3 id="211-requirements">
<a class="header-anchor" href="#211-requirements"></a>
2.1.1 Requirements
</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">pip intsall -r requirements.txt
</span></span></code></pre></div><h3 id="212-数据集存储结构">
<a class="header-anchor" href="#212-%e6%95%b0%e6%8d%ae%e9%9b%86%e5%ad%98%e5%82%a8%e7%bb%93%e6%9e%84"></a>
2.1.2 数据集存储结构
</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">#### 数据集目录结构
</span></span><span class="line"><span class="cl">├── data
</span></span><span class="line"><span class="cl">│   └── datasets
</span></span><span class="line"><span class="cl">│       ├── Houston
</span></span><span class="line"><span class="cl">│       ├── Pavia
</span></span><span class="line"><span class="cl">│       └── HyRANK
</span></span><span class="line"><span class="cl">└── ...
</span></span></code></pre></div><h3 id="213-pre-augmented">
<a class="header-anchor" href="#213-pre-augmented"></a>
2.1.3 Pre-Augmented
</h3><p>在我们的方法中，需要对源域数据进行一次DCT变换和IDCT变换，我们的方法是基于Patch的高光谱图像分类任务，如果对每一个Patch进行变换降低了模型计算速度。因此，我们推荐您直接对原始数据（一张完整的高光谱图像）进行变换</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">python scg_aug.py
</span></span></code></pre></div><h2 id="22-train">
<a class="header-anchor" href="#22-train"></a>
2.2 Train
</h2><ul>
<li>Houston:</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">python train-gan.py --data_path Houston/ --source_domain Houston13 --target_domain Houston18 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --training_sample_ratio 0.8 --flip_augmentation --radiation_augmentation
</span></span></code></pre></div><ul>
<li>Pavia:</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">python train-gan.py --data_path Pavia/ --source_domain PaviaU --target_domain PaviaC <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --training_sample_ratio 0.5
</span></span></code></pre></div><ul>
<li>HyRANK:</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">python train-gan.py --data_path HyRANK/ --source_domain Dioni --target_domain Loukia <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --training_sample_ratio 0.8
</span></span></code></pre></div><h2 id="23-visualization">
<a class="header-anchor" href="#23-visualization"></a>
2.3 Visualization
</h2><h2 id="24-loss">
<a class="header-anchor" href="#24-loss"></a>
2.4 Loss
</h2><h3 id="241-causal-inspired-disentanglement-loss">
<a class="header-anchor" href="#241-causal-inspired-disentanglement-loss"></a>
2.4.1 Causal-inspired Disentanglement Loss
</h3><p>2.1. independence loss</p>
<p>2.2.1 reconstruction loss</p>
<p>2.2.2 causal loss for disentanglement</p>
<p>2.3. consistency loss</p>
<h3 id="242-domain-generation-loss">
<a class="header-anchor" href="#242-domain-generation-loss"></a>
2.4.2 Domain Generation Loss
</h3><p>balance loss for Generator</p>
<h3 id="243-basic-loss">
<a class="header-anchor" href="#243-basic-loss"></a>
2.4.3 Basic Loss
</h3><p>SD classification loss</p>
<p>ED classification loss</p>
<h1 id="3-acknowledgments">
<a class="header-anchor" href="#3-acknowledgments"></a>
3. Acknowledgments
</h1><p>我们在此衷心感谢以下作者提供的开源代码：</p>
<ul>
<li>我们的论文在数据处理、空间随机化和光谱随机化采用了xxx所提供的代码实现，并且该论文也是我们做该研究的启发</li>
<li>数据集来自于 <a href="https://github.com/YuxiangZhang-BIT/Data-CSHSI">https://github.com/YuxiangZhang-BIT/Data-CSHSI</a> 整理的Houston、Pavia和HyRANK</li>
<li>特征提取模块我们采用了CVSS的部分结构</li>
<li>对于图像的采用DCT变换是常用手段，我们对于该部分的处理借鉴了自然图像领域的处理，主要是来自于论文xxx</li>
<li>HSIC独立性评判准则是一个经典方法，我们采用了xxx所提供的代码实现，同时简单沿用了早期分支的思想。该论文也启发我们尝试使用解耦作为解决高光谱跨场景分类任务的解决方案，而不是继续延续现在最常用的对比学习和对比对抗学习</li>
<li></li>
</ul>

        
        <hr><p>本文2025-07-21首发于<a href='https://anburger.site/'>Anby Demara's Homepage</a>，最后修改于2025-07-22</p>]]>
      </description>
      
    </item>
    
    

    <item>
      <title>PicGo实现Typora插入图片上传服务</title>
      <link>https://anburger.site/post/picgo-typora/</link>
      <pubDate>Tue, 22 Jul 2025 12:00:00 &#43;0800</pubDate>
      <author>yang_zc@aliyun.com (Anburger)</author>
      <guid>https://anburger.site/post/picgo-typora/</guid>
      <description>
        <![CDATA[<h1>PicGo实现Typora插入图片上传服务</h1><p>作者：Anburger（yang_zc@aliyun.com）</p>
        
          <p>现在已经有非常多的快速搭建<strong>博客站</strong>的工具，例如<code>JeckII、Hexo、Hugo</code>等，它们都具有非常优秀的使用体验，并且可以通过<code>GitHub</code>、<code>CloudFlare</code>等工具进行免费部署。利用它们成功搭建出自己的博客站后，往往使用<code>Markdown</code>进行博客内容撰写。在撰写过程中，我们会发现处理图片时会面临一些窘境：</p>
<ul>
<li>需要将图片放到特定资源文件夹（进行上传），操作不方便</li>
<li>图片过多后占用空间</li>
<li>图片太大时加载速度慢等</li>
</ul>
<p>我们可以采用将图片资源存放到图床的方案解决图片存储、路径问题。此外，在写作过程中通过安装<code>PicGo工具+压缩等插件</code>简化撰写过程，接下来跟我一起让写博客变得更加优雅吧！</p>
<h2 id="1-安装">
<a class="header-anchor" href="#1-%e5%ae%89%e8%a3%85"></a>
1. 安装
</h2><p><strong>PicGo: 一个用于快速上传图片并获取图片 URL 链接的工具</strong>，官方文档：<a href="https://picgo.github.io/PicGo-Doc/">PicGo</a>有详细的使用教程。</p>
<ol>
<li>下载：<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo-release</a>，<code>PicGo</code>提供众多<code>beta</code>版本，若希望体验新功能可安装最新<code>beta</code>版本。推荐安装正式版本。下载对应系统安装包进行安装，这里以<code>windows</code>系统为例，下载<code>2.3.1</code>版本安装程序：</li>
</ol>
<p><img src="https://qiniu.anburger.site/post/image-20250722151412072.png" alt="image-20250722151412072"></p>
<ol start="2">
<li>运行安装程序进行安装，安装成功后开始使用<code>PicGo</code>：</li>
</ol>
<p><img src="https://qiniu.anburger.site/post/image-20250722151741990.png" alt="image-20250722151741990"></p>
<h2 id="2-配置图床">
<a class="header-anchor" href="#2-%e9%85%8d%e7%bd%ae%e5%9b%be%e5%ba%8a"></a>
2. 配置图床
</h2><p><code>PicGo</code> 本体支持如下图床：</p>
<ul>
<li><code>七牛图床</code> v1.0</li>
<li><code>腾讯云 COS v4\v5 版本</code> v1.1 &amp; v1.5.0</li>
<li><code>又拍云</code> v1.2.0</li>
<li><code>GitHub</code> v1.5.0</li>
<li><code>SM.MS V2</code> v2.3.0-beta.0</li>
<li><code>阿里云 OSS</code> v1.6.0</li>
<li><code>Imgur</code> v1.6.0</li>
</ul>
<p>本文使用<strong>七牛云</strong>对象存储。</p>
<h3 id="21-七牛云对象存储申请">
<a class="header-anchor" href="#21-%e4%b8%83%e7%89%9b%e4%ba%91%e5%af%b9%e8%b1%a1%e5%ad%98%e5%82%a8%e7%94%b3%e8%af%b7"></a>
2.1 七牛云对象存储申请
</h3><ol>
<li>进入<a href="https://www.qiniu.com/">七牛云 | 一站式中立音视频云 + AI</a>，完成账号设置（注册、登录、认证等）。</li>
<li>完成后进入控制台（入口在网页右上角），选择新建存储空间：</li>
</ol>
<p><img src="https://qiniu.anburger.site/post/image-20250722152658046.png" alt="image-20250722152658046"></p>
<ol start="3">
<li>在新建存储空间面板中填写信息：
<ul>
<li>存储空间名称：自定义</li>
<li>存储区域：如果你拥有已备案的域名或者仅做测试使用，选择国内区域。如果你的域名无法备案，可选择海外区域（不需要备案，但访问可能需要梯子）</li>
<li>访问控制：公开（更方便）</li>
</ul>
</li>
</ol>
<p>​    填写完成后点击确认。</p>
<p><img src="https://qiniu.anburger.site/post/image-20250722153029092.png" alt="image-20250722153029092"></p>
<ol start="4">
<li>
<p>绑定域名</p>
<p>存储空间创建后，会分配一个测试域名，可以直接使用，但是会被回收，因此不推荐实际使用。</p>
<p>如果没有域名，可以注册免费域名，详见：。</p>
<p>拥有一个域名后，进入新建的存储空间进行域名管理：</p>
<p><img src="https://qiniu.anburger.site/post/image-20250722170800583.png" alt="image-20250722170800583"></p>
<p>因为CDN加速域名需要进行域名所有权认证，所以我这里选择<code>自定义源站域名</code>，点击绑定域名后，填写：</p>
<p>从绑定的域名列表中，复制<code>CNAME</code></p>
<p><img src="https://qiniu.anburger.site/post/image-20250722171225178.png" alt="image-20250722171225178"></p>
<p>然后使用<code>CloudFlare</code>配置CNAME并开启DNS减速服务(&#x1f621;)，</p>
</li>
<li></li>
</ol>
<h3 id="22-配置picgo图床">
<a class="header-anchor" href="#22-%e9%85%8d%e7%bd%aepicgo%e5%9b%be%e5%ba%8a"></a>
2.2 配置PicGo图床
</h3><p>进入<code>PicGo-&gt;图床设置-&gt;七牛云</code>，填写配置信息：</p>
<ul>
<li>
<p><code>AccessKey</code>和<code>SecretKey</code>：进入<code>七牛云-&gt;个人中心-&gt;密匙管理</code>，开启密匙访问并将对应的<code>Key</code>填入</p>
<p><img src="https://qiniu.anburger.site/post/image-20250722164135467.png" alt="image-20250722164135467"></p>
</li>
<li>
<p><code>Bucket</code>：存储空间名称（如2.1中创建的<code>anburgerblog</code>）</p>
</li>
<li>
<p>访问网址</p>
</li>
<li>
<p>存储区域</p>
</li>
<li>
<p>存储路径</p>
</li>
</ul>
<p><img src="https://qiniu.anburger.site/post/image-20250722153925421.png" alt="image-20250722153925421"></p>
<p>设置完成后点击<strong>确定</strong>进行保存，同时可以点击<strong>设为默认图床</strong>将七牛云作为默认图床。</p>
<p>在上传区进行测试。</p>
<h2 id="3-配置typora">
<a class="header-anchor" href="#3-%e9%85%8d%e7%bd%aetypora"></a>
3. 配置Typora
</h2><p>在Typora中，进入<code>文件-&gt;偏好设置</code>（<code>Windows</code>快捷键<code>Ctrl+逗号</code>），进入<code>图片</code>进行设置：</p>
<ul>
<li>插入图片时&hellip;：看个人需求设置，这里设置为无特殊操作。如果希望插入后直接上传到图床，选择<code>上传图片</code>。</li>
<li>上传服务：选择<code>PicGo（app）</code>，然后将<code>PicGo路径</code>设置为你对应的安装路径。</li>
</ul>
<p><img src="https://qiniu.anburger.site/post/image-20250722154539727.png" alt="image-20250722154539727"></p>
<p>现在就完成了所有配置，可以开始使用啦！</p>
<p>示例：</p>
<ol>
<li>复制图像（截图、Ctrl+C）</li>
<li>插入图像到对应的位置（Ctrl+V），此时，图片还是本地图片：</li>
</ol>
<p><img src="https://qiniu.anburger.site/post/image-20250722155616421.png" alt="image-20250722155616421"></p>
<ol start="3">
<li>接下来<code>右击图片-&gt;上传图片</code>：</li>
</ol>
<p><img src="https://qiniu.anburger.site/post/image-20250722155948431.png" alt="image-20250722155948431"></p>
<ol start="4">
<li>上传完成后会自动将图片替换为图床中的链接：</li>
</ol>
<p><img src="https://qiniu.anburger.site/post/image-20250722160209444.png" alt="image-20250722160209444"></p>

        
        <hr><p>本文2025-07-22首发于<a href='https://anburger.site/'>Anby Demara's Homepage</a>，最后修改于2025-07-22</p>]]>
      </description>
      
        <category>自动化工具</category>
      
    </item>
    
    

    <item>
      <title>Vercel Serverless笔记</title>
      <link>https://anburger.site/post/note-of-vercel-edge-function/</link>
      <pubDate>Fri, 01 Aug 2025 21:00:00 &#43;0800</pubDate>
      <author>yang_zc@aliyun.com (Anburger)</author>
      <guid>https://anburger.site/post/note-of-vercel-edge-function/</guid>
      <description>
        <![CDATA[<h1>Vercel Serverless笔记</h1><p>作者：Anburger（yang_zc@aliyun.com）</p>
        
          <h2 id="1-环境准备">
<a class="header-anchor" href="#1-%e7%8e%af%e5%a2%83%e5%87%86%e5%a4%87"></a>
1 环境准备
</h2><p>&#x31;&#xfe0f;&#x20e3;nodejs</p>
<p><a href="https://nodejs.org/">https://nodejs.org/</a></p>
<p>&#x32;&#xfe0f;&#x20e3;注册Vercel</p>
<p><a href="https://vercel.com/">https://vercel.com/</a></p>
<p>&#x33;&#xfe0f;&#x20e3;Vercel CLI</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm i -g vercel
</span></span></code></pre></div><p>&#x34;&#xfe0f;&#x20e3;命令行登录vercel</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">vercel login
</span></span></code></pre></div><p><img src="https://qiniu.anburger.site/post/image-20250801220752777.png" alt="image-20250801220752777"></p>
<h2 id="2-quick-start">
<a class="header-anchor" href="#2-quick-start"></a>
2 Quick Start
</h2><blockquote>
<p><strong>云函数 (Cloud Functions)</strong>：在 Vercel 平台上，这通常被称为 <strong>Serverless Functions (无服务器函数)</strong>。</p>
<p>Vercel 的核心理念是<strong>约定优于配置</strong>。你不需要复杂的配置文件，只需要将代码放在正确的目录下，Vercel 就会自动将其部署为 Serverless Function。</p></blockquote>
<p>核心理念<strong>约定优于配置</strong>的加持下，编码的核心便是：<strong>使用 <code>api/</code> 目录</strong></p>
<ol>
<li><strong>创建项目</strong>: 你的项目可以是一个 Next.js 应用，也可以是一个静态网站，甚至是空项目。</li>
<li><strong>创建 <code>api</code> 目录</strong>: 在你的项目根目录下，创建一个名为 <code>api</code> 的文件夹。</li>
<li><strong>编写函数代码</strong>: 在 <code>api</code> 目录下创建一个 JavaScript 或 TypeScript 文件。文件名将成为 API 的路径。</li>
</ol>
<p>&#x31;&#xfe0f;&#x20e3;新建空项目<code>first-serverless</code> &#x27a1;&#xfe0f; 项目根目录下新建文件夹<code>api</code> &#x27a1;&#xfe0f; <code>New hello.js</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// 标准 Nodejs HTTP 处理函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">handler</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="p">{</span> <span class="nx">name</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">query</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">response</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">message</span><span class="o">:</span> <span class="sb">`Hello, </span><span class="si">${</span><span class="nx">name</span> <span class="o">||</span> <span class="s1">&#39;World&#39;</span><span class="si">}</span><span class="sb">! This function is running on the Vercel cloud.`</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>&#x32;&#xfe0f;&#x20e3;部署</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">vercel --prod
</span></span></code></pre></div><p><img src="https://qiniu.anburger.site/post/image-20250801221517995.png" alt="image-20250801221517995"></p>
<p>执行命令后：</p>
<ul>
<li>Vercel 会自动检测到 <code>api/hello.js</code> 文件。</li>
<li>它会将这个文件打包成一个独立的 Serverless Function。</li>
<li>它会为你生成一个可访问的 URL 端点：<code>https://&lt;你的域名&gt;.vercel.app/api/hello</code>。</li>
<li>当你访问 <code>.../api/hello</code> 时，这个函数就会在云端被触发执行，例如<code>.../api/hello</code>、<code>.../api/hello?name=anby</code>。</li>
</ul>
<p>&#x1f6a9;部署成功后得到一个域名，国内访问需要绑定自己的域名，加上后缀<code>api/hello</code>，成功，Congratulations​!&#x1f389;</p>
<p><img src="https://qiniu.anburger.site/post/image-20250801221800843.png" alt="image-20250801221800843"></p>
<p><img src="https://qiniu.anburger.site/post/image-20250801222424603.png" alt="image-20250801222424603"></p>
<h2 id="3-边缘函数">
<a class="header-anchor" href="#3-%e8%be%b9%e7%bc%98%e5%87%bd%e6%95%b0"></a>
3 边缘函数
</h2><p>Vercel中编写<code>Edge Function</code>只需要在<code>api</code>中指定一个配置项即可：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">runtime</span><span class="o">:</span> <span class="s1">&#39;edge&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><h2 id="4-案例">
<a class="header-anchor" href="#4-%e6%a1%88%e4%be%8b"></a>
4 案例
</h2><p>场景：七牛云对象存储位于海外（亚太-新加坡），通过<code>Edge Function</code>中转七牛云资源请求进行加速。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// /api/proxy.js
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="kr">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">runtime</span><span class="o">:</span> <span class="s1">&#39;edge&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kr">async</span> <span class="kd">function</span> <span class="nx">handler</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 从原始请求中获取路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="p">{</span> <span class="nx">pathname</span><span class="p">,</span> <span class="nx">search</span> <span class="p">}</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">URL</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">pathname</span> <span class="o">===</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="s1">&#39;Qiniu Proxy is Running!&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">status</span><span class="o">:</span> <span class="mi">200</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span> <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/html&#39;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 构建指向七牛云存储桶的目标 URL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">destinationUrl</span> <span class="o">=</span> <span class="sb">`https://your.qiniu.domain</span><span class="si">${</span><span class="nx">pathname</span><span class="si">}${</span><span class="nx">search</span><span class="si">}</span><span class="sb">`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 从七牛云获取响应
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// 我们将原始请求的 headers, method, 和 body 都转发过去
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kr">const</span> <span class="nx">qiniuResponse</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">destinationUrl</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">headers</span><span class="o">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">headers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">method</span><span class="o">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">method</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">body</span><span class="o">:</span> <span class="nx">request</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">redirect</span><span class="o">:</span> <span class="s1">&#39;follow&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 将七牛云的响应直接返回给客户端
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">return</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="nx">qiniuResponse</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">status</span><span class="o">:</span> <span class="nx">qiniuResponse</span><span class="p">.</span><span class="nx">status</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">statusText</span><span class="o">:</span> <span class="nx">qiniuResponse</span><span class="p">.</span><span class="nx">statusText</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">headers</span><span class="o">:</span> <span class="nx">qiniuResponse</span><span class="p">.</span><span class="nx">headers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div>
        
        <hr><p>本文2025-08-01首发于<a href='https://anburger.site/'>Anby Demara's Homepage</a>，最后修改于2025-07-21</p>]]>
      </description>
      
        <category>笔记</category>
      
    </item>
    
    

    <item>
      <title>Docker常用容器部署</title>
      <link>https://anburger.site/post/docker-run/</link>
      <pubDate>Sun, 20 Jul 2025 12:00:00 &#43;0800</pubDate>
      <author>yang_zc@aliyun.com (Anburger)</author>
      <guid>https://anburger.site/post/docker-run/</guid>
      <description>
        <![CDATA[<h1>Docker常用容器部署</h1><p>作者：Anburger（yang_zc@aliyun.com）</p>
        
          <hr>
<p>nginx</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--name nginx <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-p 80:80 -p 443:443 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-v ~/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-v ~/docker/nginx/conf/default.conf:/etc/nginx/conf.d/default.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-v ~/docker/nginx/html:/usr/share/nginx/html <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-v ~/docker/nginx/ssl:/etc/nginx/ssl <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>nginx
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 复制初始化后的nginx.conf、default.conf</span>
</span></span></code></pre></div><hr>
<p>mysql</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--name mysql <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-p 3306:3306 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-e <span class="nv">TZ</span><span class="o">=</span>Asia/Shanghai <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-e <span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span>root <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-v /root/mysql/data:/var/lib/mysql <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-v /root/mysql/conf:/etc/mysql/conf.d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>mysql
</span></span></code></pre></div><hr>
<p>redis</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--name redis <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-p 6379:6379 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-v /usr/local/src/docker/redis/data:/data <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-v /usr/local/src/docker/redis/conf/redis.conf:/etc/redis/redis.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>redis redis-server /etc/redis/redis.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 配置文件/etc/redis/redis.conf</span>
</span></span></code></pre></div>
        
        <hr><p>本文2025-07-20首发于<a href='https://anburger.site/'>Anby Demara's Homepage</a>，最后修改于2025-07-20</p>]]>
      </description>
      
    </item>
    
  </channel>
</rss>
